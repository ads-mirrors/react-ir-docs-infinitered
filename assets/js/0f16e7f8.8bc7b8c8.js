"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[6394],{8973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(4848),s=n(8453);const a={sidebar_position:33},d="EmptyState",i={id:"ignite-cli/boilerplate/app/components/EmptyState",title:"EmptyState",description:"The EmptyState component is to be used when there is no data to display, usually after attempting to load some content from an external API. It is a container that can hold a heading and content. It can also display an image and provide a button to interact with.",source:"@site/docs/ignite-cli/boilerplate/app/components/EmptyState.md",sourceDirName:"ignite-cli/boilerplate/app/components",slug:"/ignite-cli/boilerplate/app/components/EmptyState",permalink:"/ignite-cli/boilerplate/app/components/EmptyState",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:33,frontMatter:{sidebar_position:33},sidebar:"Ignite",previous:{title:"Checkbox",permalink:"/ignite-cli/boilerplate/app/components/Checkbox"},next:{title:"Header",permalink:"/ignite-cli/boilerplate/app/components/Header"}},c={},l=[{value:"Props",id:"props",level:2},{value:"<code>preset</code>",id:"preset",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>imageSource</code>",id:"imagesource",level:3},{value:"<code>imageStyle</code>",id:"imagestyle",level:3},{value:"<code>ImageProps</code>",id:"imageprops",level:3},{value:"<code>heading</code>",id:"heading",level:3},{value:"<code>headingTx</code>",id:"headingtx",level:3},{value:"<code>headingTxOptions</code>",id:"headingtxoptions",level:3},{value:"<code>headingStyle</code>",id:"headingstyle",level:3},{value:"<code>HeadingTextProps</code>",id:"headingtextprops",level:3},{value:"<code>content</code>",id:"content",level:3},{value:"<code>contentTx</code>",id:"contenttx",level:3},{value:"<code>contentTxOptions</code>",id:"contenttxoptions",level:3},{value:"<code>contentStyle</code>",id:"contentstyle",level:3},{value:"<code>ContentTextProps</code>",id:"contenttextprops",level:3},{value:"<code>button</code>",id:"button",level:3},{value:"<code>buttonTx</code>",id:"buttontx",level:3},{value:"<code>buttonTxOptions</code>",id:"buttontxoptions",level:3},{value:"<code>buttonStyle</code>",id:"buttonstyle",level:3},{value:"<code>buttonTextStyle</code>",id:"buttontextstyle",level:3},{value:"<code>ButtonProps</code>",id:"buttonprops",level:3}];function r(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"emptystate",children:"EmptyState"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"EmptyState"})," component is to be used when there is no data to display, usually after attempting to load some content from an external API. It is a container that can hold a heading and content. It can also display an image and provide a button to interact with."]}),"\n",(0,o.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  preset="generic"\n  style={{ padding: 10 }}\n  imageSource={require("@assets/images/sad-face.png")}\n  imageStyle={{ height: 400, width: 400 }}\n  ImageProps={{ resizeMode: "contain" }}\n  heading="EmptyState Heading"\n  headingStyle={{ color: "#a511dc" }}\n  HeadingTextProps={{ weight: "bold" }}\n  content="EmptyState Content"\n  contentStyle={{ color: "#a511dc" }}\n  ContentTextProps={{ weight: "light" }}\n  button="Press here"\n  buttonOnPress={handleButtonPress}\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"preset",children:(0,o.jsx)(t.code,{children:"preset"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"preset"})," prop is used to set the preset container style of the EmptyState. This affects the default image, heading, content and button. Currently, only one preconfigured preset exists: ",(0,o.jsx)(t.code,{children:"generic"}),".\n",(0,o.jsx)(t.img,{src:"https://github.com/user-attachments/assets/aa8bca01-24f2-45e5-977d-5f6ac949d580",alt:"empty-state"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState preset="generic" heading="EmptyState Heading" content="EmptyState Content" />\n'})}),"\n",(0,o.jsx)(t.h3,{id:"style",children:(0,o.jsx)(t.code,{children:"style"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"style"})," prop is used to set the style override for the container."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  style={{ padding: 10, marginTop: 20 }}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"imagesource",children:(0,o.jsx)(t.code,{children:"imageSource"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"imageSource"})," prop is used to set the Image source to be displayed above the heading."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  imageSource={require("@assets/images/empty-state.png")}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"imagestyle",children:(0,o.jsx)(t.code,{children:"imageStyle"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"imageStyle"})," prop is used to set any style overrides to be applied to the image about the heading."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  imageSource={require("@assets/images/empty-state.png")}\n  imageStyle={{ borderRadius: 5 }}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"imageprops",children:(0,o.jsx)(t.code,{children:"ImageProps"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ImageProps"})," prop is used to pass any additional props directly to the ",(0,o.jsx)(t.code,{children:"Image"})," component. It will accept any prop that the ",(0,o.jsx)(t.code,{children:"Image"})," component accepts."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  imageSource={require("@assets/images/empty-state.png")}\n  ImageProps={{ onLoad: handleImageLoaded }}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"heading",children:(0,o.jsx)(t.code,{children:"heading"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"heading"})," prop is used to set the heading text of the EmptyState."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState heading="EmptyState Heading" content="EmptyState Content" button="EmptyState Button" />\n'})}),"\n",(0,o.jsx)(t.h3,{id:"headingtx",children:(0,o.jsx)(t.code,{children:"headingTx"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"headingTx"})," prop is used to set the heading text of the EmptyState using a translation key."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  headingTx="EmptyState:heading"\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"headingtxoptions",children:(0,o.jsx)(t.code,{children:"headingTxOptions"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"headingTxOptions"})," prop is used to set the options for the translation key used by the ",(0,o.jsx)(t.code,{children:"headingTx"})," prop."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  headingTx="EmptyState:heading"\n  headingTxOptions={{ count: 2 }}\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"headingstyle",children:(0,o.jsx)(t.code,{children:"headingStyle"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"headingStyle"})," prop is used to set the style of the heading text."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  headingStyle={{ color: "red" }}\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"headingtextprops",children:(0,o.jsx)(t.code,{children:"HeadingTextProps"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"HeadingTextProps"})," prop is used to pass any additional props to the heading ",(0,o.jsx)(t.code,{children:"Text"})," component. It will accept any prop that the ",(0,o.jsx)(t.a,{href:"/ignite-cli/boilerplate/app/components/Text",children:(0,o.jsx)(t.code,{children:"Text"})})," component accepts."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  HeadingTextProps={{ size: "lg" }}\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"content",children:(0,o.jsx)(t.code,{children:"content"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"content"})," prop is used to set the content text of the EmptyState."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState heading="EmptyState Heading" content="EmptyState Content" button="EmptyState Button" />\n'})}),"\n",(0,o.jsx)(t.h3,{id:"contenttx",children:(0,o.jsx)(t.code,{children:"contentTx"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"contentTx"})," prop is used to set the content text of the EmptyState using a translation key."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  contentTx="EmptyState:content"\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"contenttxoptions",children:(0,o.jsx)(t.code,{children:"contentTxOptions"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"contentTxOptions"})," prop is used to set the options for the translation key used by the ",(0,o.jsx)(t.code,{children:"contentTx"})," prop."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  contentTx="EmptyState:content"\n  contentTxOptions={{ count: 2 }}\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"contentstyle",children:(0,o.jsx)(t.code,{children:"contentStyle"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"contentStyle"})," prop is used to set the style of the content text."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  contentStyle={{ backgroundColor: colors.error, color: colors.palette.neutral100 }}\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"contenttextprops",children:(0,o.jsx)(t.code,{children:"ContentTextProps"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ContentTextProps"})," prop is used to pass any additional props to the content ",(0,o.jsx)(t.code,{children:"Text"})," component. It will accept any prop that the ",(0,o.jsx)(t.a,{href:"/ignite-cli/boilerplate/app/components/Text",children:(0,o.jsx)(t.code,{children:"Text"})})," component accepts."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  ContentTextProps={{ size: "lg" }}\n  button="EmptyState Button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"button",children:(0,o.jsx)(t.code,{children:"button"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"button"})," prop is used to set the button text of the EmptyState."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState heading="EmptyState Heading" content="EmptyState Content" button="EmptyState Button" />\n'})}),"\n",(0,o.jsx)(t.h3,{id:"buttontx",children:(0,o.jsx)(t.code,{children:"buttonTx"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"buttonTx"})," prop is used to set the button text of the EmptyState using a translation key."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  buttonTx="EmptyState:button"\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"buttontxoptions",children:(0,o.jsx)(t.code,{children:"buttonTxOptions"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"buttonTxOptions"})," prop is used to set the options for the translation key used by the ",(0,o.jsx)(t.code,{children:"buttonTx"})," prop."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  buttonTx="EmptyState:button"\n  buttonTxOptions={{ count: 2 }}\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"buttonstyle",children:(0,o.jsx)(t.code,{children:"buttonStyle"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"buttonStyle"})," prop is used to set the style overrides of the button."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  button="EmptyState Button"\n  buttonStyle={{ backgroundColor: "red" }}\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"buttontextstyle",children:(0,o.jsx)(t.code,{children:"buttonTextStyle"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"buttonTextStyle"})," prop is used to set the style of the button text."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  button="EmptyState Button"\n  buttonTextStyle={{ color: "red" }}\n/>\n'})}),"\n",(0,o.jsx)(t.h3,{id:"buttonprops",children:(0,o.jsx)(t.code,{children:"ButtonProps"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ButtonProps"})," prop is used to pass any additional props to the ",(0,o.jsx)(t.code,{children:"Button"})," component. It will accept any prop that the ",(0,o.jsx)(t.a,{href:"/ignite-cli/boilerplate/app/components/Button",children:(0,o.jsx)(t.code,{children:"Button"})})," component accepts."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  ButtonProps={{ preset: "reversed" }}\n/>\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>i});var o=n(6540);const s={},a=o.createContext(s);function d(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);