"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[4575],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>g});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?p(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},p=Object.keys(t);for(a=0;a<p.length;a++)n=p[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(t);for(a=0;a<p.length;a++)n=p[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=a.createContext({}),d=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},s=function(t){var e=d(t.components);return a.createElement(l.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,p=t.originalType,l=t.parentName,s=r(t,["components","mdxType","originalType","parentName"]),c=d(n),u=o,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||p;return n?a.createElement(g,i(i({ref:e},s),{},{components:n})):a.createElement(g,i({ref:e},s))}));function g(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var p=n.length,i=new Array(p);i[0]=u;var r={};for(var l in e)hasOwnProperty.call(e,l)&&(r[l]=e[l]);r.originalType=t,r[c]="string"==typeof t?t:o,i[1]=r;for(var d=2;d<p;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1909:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>p,metadata:()=>r,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const p={sidebar_position:33},i="EmptyState",r={unversionedId:"ignite-cli/boilerplate/components/EmptyState",id:"ignite-cli/boilerplate/components/EmptyState",title:"EmptyState",description:"The EmptyState component is to be used when there is no data to display, usually after attempting to load some content from an external API. It is a container that can hold a heading and content. It can also display an image and provide a button to interact with.",source:"@site/docs/ignite-cli/boilerplate/components/EmptyState.md",sourceDirName:"ignite-cli/boilerplate/components",slug:"/ignite-cli/boilerplate/components/EmptyState",permalink:"/ignite-cli/boilerplate/components/EmptyState",draft:!1,tags:[],version:"current",sidebarPosition:33,frontMatter:{sidebar_position:33},sidebar:"Ignite",previous:{title:"Card",permalink:"/ignite-cli/boilerplate/components/Card"},next:{title:"Header",permalink:"/ignite-cli/boilerplate/components/Header"}},l={},d=[{value:"Props",id:"props",level:2},{value:"<code>preset</code>",id:"preset",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>imageSource</code>",id:"imagesource",level:3},{value:"<code>imageStyle</code>",id:"imagestyle",level:3},{value:"<code>ImageProps</code>",id:"imageprops",level:3},{value:"<code>heading</code>",id:"heading",level:3},{value:"<code>headingTx</code>",id:"headingtx",level:3},{value:"<code>headingTxOptions</code>",id:"headingtxoptions",level:3},{value:"<code>headingStyle</code>",id:"headingstyle",level:3},{value:"<code>HeadingTextProps</code>",id:"headingtextprops",level:3},{value:"<code>content</code>",id:"content",level:3},{value:"<code>contentTx</code>",id:"contenttx",level:3},{value:"<code>contentTxOptions</code>",id:"contenttxoptions",level:3},{value:"<code>contentStyle</code>",id:"contentstyle",level:3},{value:"<code>ContentTextProps</code>",id:"contenttextprops",level:3},{value:"<code>button</code>",id:"button",level:3},{value:"<code>buttonTx</code>",id:"buttontx",level:3},{value:"<code>buttonTxOptions</code>",id:"buttontxoptions",level:3},{value:"<code>buttonStyle</code>",id:"buttonstyle",level:3},{value:"<code>buttonTextStyle</code>",id:"buttontextstyle",level:3},{value:"<code>ButtonProps</code>",id:"buttonprops",level:3}],s={toc:d},c="wrapper";function m(t){let{components:e,...n}=t;return(0,o.kt)(c,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"emptystate"},"EmptyState"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"EmptyState")," component is to be used when there is no data to display, usually after attempting to load some content from an external API. It is a container that can hold a heading and content. It can also display an image and provide a button to interact with."),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  preset="generic"\n  style={{ padding: 10 }}\n  imageSource={require("../../assets/images/sad-face.png")}\n  imageStyle={{ height: 400, width: 400 }}\n  ImageProps={{ resizeMode: "contain" }}\n  heading="EmptyState Heading"\n  headingStyle={{ color: "#a511dc" }}\n  HeadingTextProps={{ weight: "bold" }}\n  content="EmptyState Content"\n  contentStyle={{ color: "#a511dc" }}\n  ContentTextProps={{ weight: "light" }}\n  button="Press here"\n  buttonOnPress={handleButtonPress}\n/>\n')),(0,o.kt)("h3",{id:"preset"},(0,o.kt)("inlineCode",{parentName:"h3"},"preset")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"preset")," prop is used to set the preset container style of the EmptyState. This affects the default image, heading, content and button. Currently, only one preconfigured preset exists: ",(0,o.kt)("inlineCode",{parentName:"p"},"generic"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState preset="generic" heading="EmptyState Heading" content="EmptyState Content" />\n')),(0,o.kt)("h3",{id:"style"},(0,o.kt)("inlineCode",{parentName:"h3"},"style")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop is used to set the style override for the container."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  style={{ padding: 10, marginTop: 20 }}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n')),(0,o.kt)("h3",{id:"imagesource"},(0,o.kt)("inlineCode",{parentName:"h3"},"imageSource")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"imageSource")," prop is used to set the Image source to be displayed above the heading."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  imageSource={require("../../assets/images/empty-state.png")}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n')),(0,o.kt)("h3",{id:"imagestyle"},(0,o.kt)("inlineCode",{parentName:"h3"},"imageStyle")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"imageStyle")," prop is used to set any style overrides to be applied to the image about the heading."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  imageSource={require("../../assets/images/empty-state.png")}\n  imageStyle={{ borderRadius: 5 }}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n')),(0,o.kt)("h3",{id:"imageprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"ImageProps")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageProps")," prop is used to pass any additional props directly to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," component. It will accept any prop that the ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," component accepts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  imageSource={require("../../assets/images/empty-state.png")}\n  ImageProps={{ onLoad: handleImageLoaded }}\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n/>\n')),(0,o.kt)("h3",{id:"heading"},(0,o.kt)("inlineCode",{parentName:"h3"},"heading")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"heading")," prop is used to set the heading text of the EmptyState."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState heading="EmptyState Heading" content="EmptyState Content" button="EmptyState Button" />\n')),(0,o.kt)("h3",{id:"headingtx"},(0,o.kt)("inlineCode",{parentName:"h3"},"headingTx")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"headingTx")," prop is used to set the heading text of the EmptyState using a translation key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  headingTx="EmptyState.heading"\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"headingtxoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"headingTxOptions")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"headingTxOptions")," prop is used to set the options for the translation key used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"headingTx")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  headingTx="EmptyState.heading"\n  headingTxOptions={{ count: 2 }}\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"headingstyle"},(0,o.kt)("inlineCode",{parentName:"h3"},"headingStyle")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"headingStyle")," prop is used to set the style of the heading text."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  headingStyle={{ color: "red" }}\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"headingtextprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"HeadingTextProps")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"HeadingTextProps")," prop is used to pass any additional props to the heading ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component. It will accept any prop that the ",(0,o.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Text"},(0,o.kt)("inlineCode",{parentName:"a"},"Text"))," component accepts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  HeadingTextProps={{ size: "lg" }}\n  content="EmptyState Content"\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"content"},(0,o.kt)("inlineCode",{parentName:"h3"},"content")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"content")," prop is used to set the content text of the EmptyState."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState heading="EmptyState Heading" content="EmptyState Content" button="EmptyState Button" />\n')),(0,o.kt)("h3",{id:"contenttx"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentTx")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"contentTx")," prop is used to set the content text of the EmptyState using a translation key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  contentTx="EmptyState.content"\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"contenttxoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentTxOptions")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"contentTxOptions")," prop is used to set the options for the translation key used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"contentTx")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  contentTx="EmptyState.content"\n  contentTxOptions={{ count: 2 }}\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"contentstyle"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentStyle")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"contentStyle")," prop is used to set the style of the content text."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  contentStyle={{ backgroundColor: colors.error, color: colors.palette.neutral100 }}\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"contenttextprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"ContentTextProps")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ContentTextProps")," prop is used to pass any additional props to the content ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component. It will accept any prop that the ",(0,o.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Text"},(0,o.kt)("inlineCode",{parentName:"a"},"Text"))," component accepts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  ContentTextProps={{ size: "lg" }}\n  button="EmptyState Button"\n/>\n')),(0,o.kt)("h3",{id:"button"},(0,o.kt)("inlineCode",{parentName:"h3"},"button")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"button")," prop is used to set the button text of the EmptyState."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState heading="EmptyState Heading" content="EmptyState Content" button="EmptyState Button" />\n')),(0,o.kt)("h3",{id:"buttontx"},(0,o.kt)("inlineCode",{parentName:"h3"},"buttonTx")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"buttonTx")," prop is used to set the button text of the EmptyState using a translation key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  buttonTx="EmptyState.button"\n/>\n')),(0,o.kt)("h3",{id:"buttontxoptions"},(0,o.kt)("inlineCode",{parentName:"h3"},"buttonTxOptions")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"buttonTxOptions")," prop is used to set the options for the translation key used by the ",(0,o.kt)("inlineCode",{parentName:"p"},"buttonTx")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  buttonTx="EmptyState.button"\n  buttonTxOptions={{ count: 2 }}\n/>\n')),(0,o.kt)("h3",{id:"buttonstyle"},(0,o.kt)("inlineCode",{parentName:"h3"},"buttonStyle")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"buttonStyle")," prop is used to set the style overrides of the button."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  button="EmptyState Button"\n  buttonStyle={{ backgroundColor: "red" }}\n/>\n')),(0,o.kt)("h3",{id:"buttontextstyle"},(0,o.kt)("inlineCode",{parentName:"h3"},"buttonTextStyle")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"buttonTextStyle")," prop is used to set the style of the button text."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  button="EmptyState Button"\n  buttonTextStyle={{ color: "red" }}\n/>\n')),(0,o.kt)("h3",{id:"buttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"ButtonProps")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ButtonProps")," prop is used to pass any additional props to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component. It will accept any prop that the ",(0,o.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Button"},(0,o.kt)("inlineCode",{parentName:"a"},"Button"))," component accepts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  heading="EmptyState Heading"\n  content="EmptyState Content"\n  ButtonProps={{ preset: "reversed" }}\n/>\n')))}m.isMDXComponent=!0}}]);