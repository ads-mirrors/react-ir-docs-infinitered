"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[2227],{2631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=t(4848),r=t(8453);const i={title:"Image Overlay"},a="Overlay",s={id:"reactotron/plugins/overlay",title:"Image Overlay",description:"Overlay is a plugin for reactotron-react-native which allows you to have an image uploaded",source:"@site/docs/reactotron/plugins/overlay.md",sourceDirName:"reactotron/plugins",slug:"/reactotron/plugins/overlay",permalink:"/reactotron/plugins/overlay",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Image Overlay"},sidebar:"Reactotron",previous:{title:"Open In Editor",permalink:"/reactotron/plugins/open-in-editor"},next:{title:"MMKV",permalink:"/reactotron/plugins/react-native-mmkv"}},c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"overlay",children:"Overlay"}),"\n",(0,o.jsxs)(n.p,{children:["Overlay is a plugin for ",(0,o.jsx)(n.code,{children:"reactotron-react-native"})," which allows you to have an image uploaded\nto your simulator to stay on top of your app. This helps you to create those pixel perfect screens by helping you compare your app to the design."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["To use the Overlay plugin, add the additional plugin on the ",(0,o.jsx)(n.code,{children:"import"})," line."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import Reactotron, { overlay } from "reactotron-react-native"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Add it as a plugin to Reactotron."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"Reactotron.configure()\n  .useReactNative({\n    overlay: true, // <--- here we go!\n  })\n  .connect()\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.p,{children:"Next, find the root UI component in your app and wrap it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// let's pretend this is your app.\nclass MyApp extends Component {\n  render() {\n    return <Text>I may have shipped too early.</Text>\n  }\n}\n\n// let's wrap it, so the overlay stays on top!\nconst MyAppWithBenefits = Reactotron.overlay(MyApp)\n\nexport default MyAppWithBenefits\n"})}),"\n",(0,o.jsx)(n.h1,{id:"react-native-production-caveat",children:"React Native Production Caveat"}),"\n",(0,o.jsxs)(n.p,{children:["One common gotcha here is when you make production builds since ",(0,o.jsx)(n.code,{children:"reactotron-react-native"})," is likely setup in ",(0,o.jsx)(n.code,{children:"devDependencies"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"If you'd like to keep it like this (I recommend it!), then perhaps your code might look more like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const MyAppWithBenefits = __DEV__ ? Reactotron.overlay(MyApp) : MyApp\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Another option is to ship it in your ",(0,o.jsx)(n.code,{children:"dependencies"})," (not recommended -- but sometimes you wanna run it on a device)."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(6540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);