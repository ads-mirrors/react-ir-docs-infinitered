"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[1424],{7110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var l=t(4848),s=t(8453);const o={sidebar_position:40},r="TextField",i={id:"ignite-cli/boilerplate/app/components/TextField",title:"TextField",description:"Ignite's TextField Component is an enhanced version of the built-in React Native TextInput component. It consists of TextInput and a Text(./Text.md) label.",source:"@site/docs/ignite-cli/boilerplate/app/components/TextField.md",sourceDirName:"ignite-cli/boilerplate/app/components",slug:"/ignite-cli/boilerplate/app/components/TextField",permalink:"/ignite-cli/boilerplate/app/components/TextField",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"Ignite",previous:{title:"Text",permalink:"/ignite-cli/boilerplate/app/components/Text"},next:{title:"Toggle",permalink:"/ignite-cli/boilerplate/app/components/Toggle"}},a={},d=[{value:"Props",id:"props",level:2},{value:"<code>status</code>",id:"status",level:3},{value:"<code>label</code>",id:"label",level:3},{value:"<code>labelTx</code>",id:"labeltx",level:3},{value:"<code>labelTxOptions</code>",id:"labeltxoptions",level:3},{value:"<code>LabelTextProps</code>",id:"labeltextprops",level:3},{value:"<code>helper</code>",id:"helper",level:3},{value:"<code>helperTx</code>",id:"helpertx",level:3},{value:"<code>helperTxOptions</code>",id:"helpertxoptions",level:3},{value:"<code>HelperTextProps</code>",id:"helpertextprops",level:3},{value:"<code>placeholder</code>",id:"placeholder",level:3},{value:"<code>placeholderTx</code>",id:"placeholdertx",level:3},{value:"<code>placeholderTxOptions</code>",id:"placeholdertxoptions",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>containerStyle</code>",id:"containerstyle",level:3},{value:"<code>inputWrapperStyle</code>",id:"inputwrapperstyle",level:3},{value:"<code>RightAccessory</code> and <code>LeftAccessory</code>",id:"rightaccessory-and-leftaccessory",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"textfield",children:"TextField"}),"\n",(0,l.jsxs)(n.p,{children:["Ignite's ",(0,l.jsx)(n.code,{children:"TextField"})," Component is an enhanced version of the built-in React Native ",(0,l.jsx)(n.a,{href:"https://reactnative.dev/docs/textinput",children:(0,l.jsx)(n.code,{children:"TextInput"})})," component. It consists of TextInput and a Text(./Text.md) label."]}),"\n",(0,l.jsx)(n.p,{children:"With this component you will be able to standardise TextInput component across your app."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'import { TextField } from \'../components\';\n\nconst [input, setInput] = useState("")\n<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  status="error"\n  label="Name"\n  labelTx="login.nameLabel"\n  labelTxOptions={{ name: "John" }}\n  LabelTextProps={{ style: { color: "#FFFFFF" } }}\n  placeholder="John Doe"\n  placeholderTx="login.namePlaceholder"\n  placeholderTxOptions={{ name: "John" }}\n  helper="Enter your name"\n  helperTx="login.nameHelper"\n  helperTxOptions={{ name: "John" }}\n  HelperTextProps={{ style: { color: "#FFFFFF" } }}\n  style={{ backgroundColor: "#BFBFBF" }}\n  containerStyle={{ backgroundColor: "#BFBFBF" }}\n  inputWrapperStyle={{ backgroundColor: "#BFBFBF" }}\n  RightAccessory={() => <Icon icon="check" />}\n  LeftAccessory={() => <Icon icon="bell" />}\n/>\n\n'})}),"\n",(0,l.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"TextField"})," component accepts all the props of the built-in React Native ",(0,l.jsx)(n.a,{href:"https://reactnative.dev/docs/textinput",children:(0,l.jsx)(n.code,{children:"TextInput"})})," component which will be forwarded to the ",(0,l.jsx)(n.code,{children:"TextInput"})," component, as well as the following props:"]}),"\n",(0,l.jsx)(n.h3,{id:"status",children:(0,l.jsx)(n.code,{children:"status"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"status"})," prop is used to set an ",(0,l.jsx)(n.code,{children:"'error'"})," or ",(0,l.jsx)(n.code,{children:"'disabled'"})," state on the component. The default value is ",(0,l.jsx)(n.code,{children:"null"}),". You can use it to show an error style for validations or to disable the component. By default the ",(0,l.jsx)(n.code,{children:"'error'"})," status will set the ",(0,l.jsx)(n.code,{children:"borderColor"})," on the input wrapper to whatever ",(0,l.jsx)(n.code,{children:"colors.error"})," is set to. Setting the status to ",(0,l.jsx)(n.code,{children:"'disabled'"})," will disable editing on the ",(0,l.jsx)(n.code,{children:"TextInput"})," component."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} status="error" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"label",children:(0,l.jsx)(n.code,{children:"label"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"label"})," optional prop is a string that is used to set the label. If this is not set, the ",(0,l.jsx)(n.code,{children:"labelTx"})," prop must be present to set the label. If both are set, the ",(0,l.jsx)(n.code,{children:"label"})," value will be used."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} label="Name" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"labeltx",children:(0,l.jsx)(n.code,{children:"labelTx"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"labelTx"})," optional prop is the string key used to look up the translated text for the user's locale. Ignite uses ",(0,l.jsx)(n.a,{href:"http://i18njs.com/",children:(0,l.jsx)(n.code,{children:"i18n-js"})})," for internationalization. If this is not set, the ",(0,l.jsx)(n.code,{children:"label"})," prop must be present to set the label. If both are set, the ",(0,l.jsx)(n.code,{children:"label"})," value will be used."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} labelTx="signup.name" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"labeltxoptions",children:(0,l.jsx)(n.code,{children:"labelTxOptions"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"labelTxOptions"})," is an optional prop that is used to pass props to the translation lookup for the header title. This is useful if you need to pass in dynamic values to the translation."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  labelTx="signup.name"\n  labelTxOptions={{ name: "John" }}\n  onChangeText={(value) => setInput(value)}\n/>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"labeltextprops",children:(0,l.jsx)(n.code,{children:"LabelTextProps"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"LabelTextProps"})," is an optional prop that is used to pass props to the ",(0,l.jsx)(n.a,{href:"/ignite-cli/boilerplate/app/components/Text",children:(0,l.jsx)(n.code,{children:"Text"})})," component that renders the label."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  labelTx="signup.name"\n  onChangeText={(value) => setInput(value)}\n  LabelTextProps={{ style: { color: "red" } }}\n/>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"helper",children:(0,l.jsx)(n.code,{children:"helper"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"helper"})," optional prop is a string that is used to set the helper text. If this is not set, the ",(0,l.jsx)(n.code,{children:"helperTx"})," prop must be present to set the helper text. If both are set, the ",(0,l.jsx)(n.code,{children:"helper"})," value will be used. The helper text is rendered with a ",(0,l.jsx)(n.a,{href:"/ignite-cli/boilerplate/app/components/Text",children:(0,l.jsx)(n.code,{children:"Text"})})," component."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} helper="This is a helper text" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"helpertx",children:(0,l.jsx)(n.code,{children:"helperTx"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"helperTx"})," optional prop is the string key used to look up the translated text for the user's locale. Ignite uses ",(0,l.jsx)(n.a,{href:"http://i18njs.com/",children:(0,l.jsx)(n.code,{children:"i18n-js"})})," for internationalization. If this is not set, the ",(0,l.jsx)(n.code,{children:"helper"})," prop must be present to set the helper text. If both are set, the ",(0,l.jsx)(n.code,{children:"helper"})," value will be used."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} helperTx="signup.name" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"helpertxoptions",children:(0,l.jsx)(n.code,{children:"helperTxOptions"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"helperTxOptions"})," is an optional prop that is used to pass props to the translation lookup for the helper text. This is useful if you need to pass in dynamic values to the translation."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  helperTx="login.name"\n  helperTxOptions={{ name: "John" }}\n  onChangeText={(value) => setInput(value)}\n/>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"helpertextprops",children:(0,l.jsx)(n.code,{children:"HelperTextProps"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"HelperTextProps"})," is an optional prop that is used to pass props to the ",(0,l.jsx)(n.a,{href:"/ignite-cli/boilerplate/app/components/Text",children:(0,l.jsx)(n.code,{children:"Text"})})," component that renders the helper text."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  helper="Name"\n  onChangeText={(value) => setInput(value)}\n  HelperTextProps={{ style: { color: "red" } }}\n/>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"placeholder",children:(0,l.jsx)(n.code,{children:"placeholder"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"placeholder"})," optional prop is a string that is used to set the placeholder. If this is not set, the ",(0,l.jsx)(n.code,{children:"placeholderTx"})," prop must be present to set the placeholder. If both are set, the ",(0,l.jsx)(n.code,{children:"placeholder"})," value will be used."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} placeholder="Name" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"placeholdertx",children:(0,l.jsx)(n.code,{children:"placeholderTx"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"placeholderTx"})," optional prop is the string key used to look up the translated text for the user's locale. Ignite uses ",(0,l.jsx)(n.a,{href:"http://i18njs.com/",children:(0,l.jsx)(n.code,{children:"i18n-js"})})," for internationalization. If this is not set, the ",(0,l.jsx)(n.code,{children:"placeholder"})," prop must be present to set the placeholder. If both are set, the ",(0,l.jsx)(n.code,{children:"placeholder"})," value will be used."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField value={input} onChangeText={(value) => setInput(value)} placeholderTx="signup.name" />\n'})}),"\n",(0,l.jsx)(n.h3,{id:"placeholdertxoptions",children:(0,l.jsx)(n.code,{children:"placeholderTxOptions"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"placeholderTxOptions"})," is an optional prop that is used to pass props to the translation lookup for the placeholder text. This is useful if you need to pass in dynamic values to the translation."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"<TextField value={input} onChangeText={(value) => setInput(value)} />\n"})}),"\n",(0,l.jsx)(n.h3,{id:"style",children:(0,l.jsx)(n.code,{children:"style"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"style"})," optional prop is an object used to override the input style."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  style={{ backgroundColor: "red" }}\n/>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"containerstyle",children:(0,l.jsx)(n.code,{children:"containerStyle"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"containerStyle"})," optional prop is an object used to override the container style."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  containerStyle={{ backgroundColor: "red" }}\n/>\n'})}),"\n",(0,l.jsx)(n.h3,{id:"inputwrapperstyle",children:(0,l.jsx)(n.code,{children:"inputWrapperStyle"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"inputWrapperStyle"})," optional prop is an object used to override the input wrapper style."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  inputWrapperStyle={{ backgroundColor: "red" }}\n/>\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"rightaccessory-and-leftaccessory",children:[(0,l.jsx)(n.code,{children:"RightAccessory"})," and ",(0,l.jsx)(n.code,{children:"LeftAccessory"})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"RightAccessory"})," and ",(0,l.jsx)(n.code,{children:"LeftAccessory"})," optional props are components that are rendered on the right and left sides of the input, respectively. This is useful for rendering icons or buttons. The ",(0,l.jsx)(n.a,{href:"#status",children:(0,l.jsx)(n.code,{children:"status"})}),", ",(0,l.jsx)(n.code,{children:"multiline"})," from the ",(0,l.jsx)(n.code,{children:"TextInputProps"}),", ",(0,l.jsx)(n.code,{children:"editable"})," (negation of ",(0,l.jsx)(n.code,{children:"disabled"})," status), and a default ",(0,l.jsx)(n.code,{children:"style"})," attribute are passed into it via props for custom usage."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  RightAccessory={(props) => (\n    // props has `multiline`, `status`, `disabled`, and `style` attributes\n    {disabled, status} = props\n\n    if (!!disabled) return <Icon icon="lock" color="gray" />\n    if (status === \'error\') return <Icon icon="x" color="red" />\n\n    return <Icon icon="check" color="green" />\n  )}\n/>\n'})}),"\n",(0,l.jsxs)(n.p,{children:["It's also recommended to use ",(0,l.jsx)(n.code,{children:"useMemo"})," on accessories to prevent flickering, as without ",(0,l.jsx)(n.code,{children:"useMemo"})," they will rerender whenever the input value changes."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'const PasswordRightAccessory = useMemo(\n  () =>\n    function PasswordRightAccessory(props: TextFieldAccessoryProps) {\n      return (\n        <Icon\n          icon={isAuthPasswordHidden ? "view" : "hidden"}\n          color={colors.palette.neutral800}\n          containerStyle={props.style}\n          onPress={() => setIsAuthPasswordHidden(!isAuthPasswordHidden)}\n        />\n      )\n    },\n  [isAuthPasswordHidden],\n)\n'})}),"\n",(0,l.jsxs)(n.p,{children:["This could then be passed to the ",(0,l.jsx)(n.code,{children:"TextField"})," component directly."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"<TextField\n  value={password}\n  onChangeText={(value) => setPassword(password)}\n  RightAccessory={PasswordRightAccessory}\n/>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var l=t(6540);const s={},o=l.createContext(s);function r(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);