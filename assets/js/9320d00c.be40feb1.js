"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[3614],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7745:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:99},i="Project Structure and Management",s={unversionedId:"react-native-mlkit/contributing/project-structure-and-management",id:"react-native-mlkit/contributing/project-structure-and-management",title:"Project Structure and Management",description:"This document outlines the structure of our monorepo and the tools and practices we use to manage it.",source:"@site/docs/react-native-mlkit/contributing/project-structure-and-management.md",sourceDirName:"react-native-mlkit/contributing",slug:"/react-native-mlkit/contributing/project-structure-and-management",permalink:"/react-native-mlkit/contributing/project-structure-and-management",draft:!1,tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"React Native MLKit",previous:{title:"Editing Native Code",permalink:"/react-native-mlkit/contributing/editing-native-code"},next:{title:"Introduction",permalink:"/react-native-mlkit/"}},c={},l=[{value:"Monorepo Structure",id:"monorepo-structure",level:2},{value:"Managing the Monorepo",id:"managing-the-monorepo",level:2},{value:"Turbo",id:"turbo",level:3},{value:"Yarn Workspaces",id:"yarn-workspaces",level:3},{value:"Changesets",id:"changesets",level:3},{value:"Continuous Integration (CI)",id:"continuous-integration-ci",level:3},{value:"Scripts",id:"scripts",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"project-structure-and-management"},"Project Structure and Management"),(0,o.kt)("p",null,"This document outlines the structure of our monorepo and the tools and practices we use to manage it."),(0,o.kt)("h2",{id:"monorepo-structure"},"Monorepo Structure"),(0,o.kt)("p",null,"Our monorepo consists of several key directories, each serving a specific purpose:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"apps/"),": Contains the example app(s) demonstrating how to use the modules. It's a great place for testing and\nshowcasing real-world usage."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"docs/"),": Houses the documentation for the modules and contribution guidelines. We use Docusaurus for a smooth\ndocumentation experience."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"modules/"),": The core of our monorepo, this directory contains the source code for each module. Each module is a\nseparate npm package."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"packages/"),": Includes internal packages such as configurations for ESLint, TypeScript, and other tooling that\nsupports development across the monorepo."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"scripts/"),": Contains shell scripts and other utilities for managing the monorepo, like setup and release scripts.")),(0,o.kt)("h2",{id:"managing-the-monorepo"},"Managing the Monorepo"),(0,o.kt)("h3",{id:"turbo"},"Turbo"),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://turborepo.org/"},"Turbo")," to manage our monorepo. Turbo optimizes the build process by caching builds and\nonly rebuilding what's necessary. It's highly efficient for testing, building, and deploying code across multiple\nprojects within the monorepo."),(0,o.kt)("h3",{id:"yarn-workspaces"},"Yarn Workspaces"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/en/docs/workspaces/"},"Yarn Workspaces")," is another key tool in our monorepo management\nstrategy. It allows us to install dependencies for all our projects with a single ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn install")," command, link\ninterdependent projects within the monorepo, and manage a single ",(0,o.kt)("inlineCode",{parentName:"p"},"node_modules")," directory at the root level, reducing\ninstall time and disk space usage."),(0,o.kt)("h3",{id:"changesets"},"Changesets"),(0,o.kt)("p",null,"Versioning and publishing are handled through ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/atlassian/changesets"},"Changesets"),", a tool that manages\nversioning for multi-package repositories. Changesets ensure that version numbers are updated correctly across packages,\nchangelogs are generated, and packages are published in sync."),(0,o.kt)("h3",{id:"continuous-integration-ci"},"Continuous Integration (CI)"),(0,o.kt)("p",null,"Our CI pipeline is configured to build, test, and deploy changes across the monorepo. It ensures that every commit\nadheres to our coding standards, passes all tests, and that documentation is updated accordingly."),(0,o.kt)("h3",{id:"scripts"},"Scripts"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts/")," directory contains custom scripts to automate common monorepo tasks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setup.sh")," for initializing the development environment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"release.mjs")," for managing releases across packages."),(0,o.kt)("li",{parentName:"ul"},"Additional utility scripts for linting, testing, and cleaning the repo.")),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"Our monorepo structure and the tools we've chosen are integral to our development workflow. They allow us to efficiently\nmanage multiple related projects, ensure consistency across our codebase, and streamline our CI/CD processes. By\nunderstanding and adhering to our monorepo management practices, contributors can effectively navigate, develop, and\ncontribute to our projects."))}d.isMDXComponent=!0}}]);