"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[5827],{6753:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ignite-cli/boilerplate/app/screens/Screens","title":"Screens folder","description":"The screens folder contains the main screens of your app. Each screen is a file ending in Screen.tsx, such as LoginScreen.tsx. They are optionally contained in folders (but we recommend keeping it fairly flat).","source":"@site/docs/ignite-cli/boilerplate/app/screens/Screens.md","sourceDirName":"ignite-cli/boilerplate/app/screens","slug":"/ignite-cli/boilerplate/app/screens/","permalink":"/ignite-cli/boilerplate/app/screens/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"Ignite","previous":{"title":"navigationUtilities.ts","permalink":"/ignite-cli/boilerplate/app/navigators/navigationUtilities.ts"},"next":{"title":"Services folder","permalink":"/ignite-cli/boilerplate/app/services/"}}');var s=t(4848),r=t(8453);const o={},c="Screens folder",a={},l=[];function p(e){const n={code:"code",h1:"h1",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"screens-folder",children:"Screens folder"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"screens"})," folder contains the main screens of your app. Each screen is a file ending in ",(0,s.jsx)(n.code,{children:"Screen.tsx"}),", such as ",(0,s.jsx)(n.code,{children:"LoginScreen.tsx"}),". They are optionally contained in folders (but we recommend keeping it fairly flat)."]}),"\n",(0,s.jsx)(n.p,{children:"Explore the included screens (if you left the demo code in place) to see how they work."}),"\n",(0,s.jsx)(n.p,{children:"Screens are the central point of interaction within your app. They are responsible for rendering the UI / state, styling, handling user input, and initiating navigation to other screens."}),"\n",(0,s.jsxs)(n.p,{children:['We also tend to co-locate specific components for screens within the same folder. For example, if a login screen has a "LoginForm" component that is only used by that screen, we might put it in ',(0,s.jsx)(n.code,{children:"app/screens/login/LoginForm.tsx"})," (alongside ",(0,s.jsx)(n.code,{children:"LoginScreen.tsx"}),"). If it's a component that is used by multiple screens, we'll put it in the ",(0,s.jsx)(n.code,{children:"components"})," folder."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);