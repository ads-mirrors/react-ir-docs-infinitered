"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[2156],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=o.createContext({}),s=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(u.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=s(t),c=a,h=m["".concat(u,".").concat(c)]||m[c]||d[c]||i;return t?o.createElement(h,l(l({ref:n},p),{},{components:t})):o.createElement(h,l({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=c;var r={};for(var u in n)hasOwnProperty.call(n,u)&&(r[u]=n[u]);r.originalType=e,r[m]="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var o=t(7462),a=(t(7294),t(3905));const i={},l=void 0,r={unversionedId:"newgun/runtime",id:"newgun/runtime",title:"runtime",description:"Gluegun provides a builder that lets you initialize and configure Gluegun to work with your CLI. It lets you load & execute commands, extensions, and plugins.",source:"@site/docs/newgun/runtime.md",sourceDirName:"newgun",slug:"/newgun/runtime",permalink:"/ir-docs/docs/newgun/runtime",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"newgun",previous:{title:"Making a plugin for your Gluegun-powered CLI",permalink:"/ir-docs/docs/newgun/Tutorials/tutorial-making-a-plugin"},next:{title:"Sniff",permalink:"/ir-docs/docs/newgun/sniff"}},u={},s=[{value:"build",id:"build",level:2},{value:"src",id:"src",level:2},{value:"plugin",id:"plugin",level:2},{value:"plugins",id:"plugins",level:2},{value:"help",id:"help",level:2},{value:"version",id:"version",level:2},{value:"defaultCommand",id:"defaultcommand",level:2},{value:"command",id:"command",level:2},{value:"exclude",id:"exclude",level:2},{value:"checkForUpdates",id:"checkforupdates",level:2},{value:"create",id:"create",level:2},{value:"run",id:"run",level:2},{value:"configuration",id:"configuration",level:2}],p={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Gluegun provides a builder that lets you initialize and configure Gluegun to work with your CLI. It lets you load & execute commands, extensions, and plugins."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: Check out the ",(0,a.kt)("a",{parentName:"em",href:"/ir-docs/docs/newgun/sniff"},"sniff")," module for detecting if your environment is able to run.")),(0,a.kt)("p",null,"Here's a kitchen sink version, which we're about to cover."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { build } = 'gluegun'\n\nconst cli = build('movie')\n  .src(__dirname)\n  .plugin('~/.movie/movie-imdb')\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: toolbox => toolbox.print.info('hi!') })\n  .exclude(['filesystem', 'semver', 'system', 'prompt', 'http'])\n  .checkForUpdates(5) // check for updates randomly about 5% of the time\n  .create()\n\nawait cli.run()\n")),(0,a.kt)("h2",{id:"build"},"build"),(0,a.kt)("p",null,"Grab the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," function from ",(0,a.kt)("inlineCode",{parentName:"p"},"gluegun"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { build } = require('gluegun')\n")),(0,a.kt)("p",null,"Now let's build a ",(0,a.kt)("inlineCode",{parentName:"p"},"gluegun")," cli environment by configuring various features."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('mycli')\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"mycli")," brand that you pass into ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," is used through-out gluegun for things like configuration file names and folder names for plugins. You can also set it later, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build().brand('movie')\n")),(0,a.kt)("p",null,"Out of the box, this CLI does very little. And by very little I mean nothing. So let's configure this. We'll be chaining the ",(0,a.kt)("inlineCode",{parentName:"p"},"build()")," function from here."),(0,a.kt)("h2",{id:"src"},"src"),(0,a.kt)("p",null,"This sets where the default commands and extensions are located, in\n",(0,a.kt)("inlineCode",{parentName:"p"},"commands")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"extensions")," folders, respectively."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie').src(__dirname)\n")),(0,a.kt)("p",null,"When you run a command, it'll first load extensions in this folder and then check the commands in this folder for the right command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'# run a command with arguments\n$ movie actors Kingpin\n\n# run a command with arguments & options\n$ movie producers "Planes, Trains, & Automobiles" --sort age\n')),(0,a.kt)("h2",{id:"plugin"},"plugin"),(0,a.kt)("p",null,"Additional functionality can be added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"gluegun")," object with ",(0,a.kt)("a",{parentName:"p",href:"./plugins.md"},"plugins"),". Plugins can be yours or your users."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Hint: ",(0,a.kt)("inlineCode",{parentName:"em"},"src")," and ",(0,a.kt)("inlineCode",{parentName:"em"},"plugin")," are almost identical under the hood. The only thing they do differently is ",(0,a.kt)("inlineCode",{parentName:"em"},"src"),' will be loaded first and be the "default plugin".')),(0,a.kt)("p",null,"A plugin is a folder (or, more often, an NPM package) that contains a structure - something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"movie-credits\n  commands\n    actors.js\n    producers.js\n  extensions\n    retrieve-imdb.js\n  templates\n    actor-view.js.ejs\n  movie.config.js\n")),(0,a.kt)("p",null,"You can load a plugin from a directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugin('~/.movie/movie-imdb')\n")),(0,a.kt)("h2",{id:"plugins"},"plugins"),(0,a.kt)("p",null,"You can also load multiple plugins within a directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugin('~/.movie/movie-imdb')\n  .plugins('./node_modules', { pattern: 'movie-' })\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"plugins")," supports a ",(0,a.kt)("inlineCode",{parentName:"p"},"fs-jetpack")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/szwacz/fs-jetpack#findpath-searchoptions"},"matching pattern")," so you can filter out a subset of directories instead of just all."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"  .plugins('./node_modules', { matching: 'movies-*' })\n")),(0,a.kt)("p",null,"If you would like to keep plugins hidden and not available at the command line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"  .plugins('./node_modules', { matching: 'movies-*', hidden: true })\n")),(0,a.kt)("p",null,"When plugins are hidden they can still be run directly from the cli."),(0,a.kt)("h2",{id:"help"},"help"),(0,a.kt)("p",null,"Gluegun ships with a somewhat adequate ",(0,a.kt)("inlineCode",{parentName:"p"},"help")," screen out of the box. Add it to your\nCLI easily by calling ",(0,a.kt)("inlineCode",{parentName:"p"},".help()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n")),(0,a.kt)("p",null,"You can also pass in a function or command object here:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"  .help(toolbox => toolbox.print.info('No help for you!'))\n  .help({\n    name: 'help',\n    alias: 'helpmeplease',\n    hidden: true,\n    dashed: true,\n    run: toolbox => toolbox.print.info('No help for you!')\n  })\n")),(0,a.kt)("h2",{id:"version"},"version"),(0,a.kt)("p",null,"You usually like to be able to run ",(0,a.kt)("inlineCode",{parentName:"p"},"--version")," to see your CLI's version from the command\nline, so add it easily with ",(0,a.kt)("inlineCode",{parentName:"p"},".version()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n")),(0,a.kt)("p",null,"Just like ",(0,a.kt)("inlineCode",{parentName:"p"},"help")," above, you can pass in a function or command object to configure it further."),(0,a.kt)("h2",{id:"defaultcommand"},"defaultCommand"),(0,a.kt)("p",null,"If the user runs your CLI and doesn't supply any matching parameters, it'll run this command\ninstead. Note that you can do this by supplying a ",(0,a.kt)("inlineCode",{parentName:"p"},"<brand>.js")," file in your ",(0,a.kt)("inlineCode",{parentName:"p"},"./commands"),"\nfolder as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n")),(0,a.kt)("p",null,"Just like ",(0,a.kt)("inlineCode",{parentName:"p"},"help")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," above, you can pass in a function or command object if\nyou prefer more control."),(0,a.kt)("h2",{id:"command"},"command"),(0,a.kt)("p",null,"If you want to pass in commands directly to the runtime builder, you can do that with ",(0,a.kt)("inlineCode",{parentName:"p"},".command()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: toolbox => toolbox.print.info('hi!') })\n")),(0,a.kt)("p",null,"In this case, if you ran ",(0,a.kt)("inlineCode",{parentName:"p"},"movie hi"),", it would run the function provided and print out 'hi!'."),(0,a.kt)("p",null,"You must provide an object with at least a ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," function, which can be\n",(0,a.kt)("inlineCode",{parentName:"p"},"async")," or regular."),(0,a.kt)("h2",{id:"exclude"},"exclude"),(0,a.kt)("p",null,"If you don't need certain core extensions, you can skip loading them (thus improving startup time) by using ",(0,a.kt)("inlineCode",{parentName:"p"},".exclude()"),". Just pass in an array of string names for the core extensions you don't need."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie').exclude([\n  'meta',\n  'strings',\n  'print',\n  'filesystem',\n  'semver',\n  'system',\n  'prompt',\n  'http',\n  'template',\n  'patching',\n])\n")),(0,a.kt)("p",null,"If you find you need one of these extensions for just ",(0,a.kt)("em",{parentName:"p"},"one")," command but don't want to load it for ",(0,a.kt)("em",{parentName:"p"},"all")," of your commands, you can always load it separately from the Gluegun toolbox, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { prompt } = require('gluegun')\n// or\nconst { prompt } = require('gluegun/prompt')\n")),(0,a.kt)("p",null,"For reference, the core extensions that incur the biggest startup performance penalty are (timing varies per machine, but this gives some sense of scale):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"prompt +100ms\nprint +45ms\nhttp +30ms\nsystem +10ms\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note about TypeScript and ",(0,a.kt)("inlineCode",{parentName:"em"},"exclude"),":")," Please note that the TypeScript type ",(0,a.kt)("inlineCode",{parentName:"p"},"GluegunToolbox")," (as of Gluegun 2.1.x) always assumes that core extensions are included, even if you excluded them in the builder. In this case, it's recommended that you create your own ",(0,a.kt)("inlineCode",{parentName:"p"},"FooToolbox")," (or similar) and update the interface to match your preferred configuration. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// wherever your types are, say, `./src/types.ts`\nimport { GluegunToolbox } from 'gluegun'\nexport interface FooToolbox extends GluegunToolbox {\n  prompt: null\n  print: null\n  http: null\n  system: null\n}\n\n// in a command\nimport { FooToolbox } from '../types'\nmodule.exports = {\n  run: async (toolbox: FooToolbox) => {\n    // ... use toolbox with your excluded extensions\n  },\n}\n")),(0,a.kt)("h2",{id:"checkforupdates"},"checkForUpdates"),(0,a.kt)("p",null,"This allows you to check for updates every so often. Because we don't track how often your CLI is run, instead, we allow you to set a percentage chance of checking for updates. We recommend somewhere between 1-20, depending on how often your CLI is run. If you want to run it every time, set it to 100."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: toolbox => toolbox.print.info('hi!') })\n  .checkForUpdates(5)\n")),(0,a.kt)("h2",{id:"create"},"create"),(0,a.kt)("p",null,"At this point, we've been configuring our CLI. When we're ready, we call ",(0,a.kt)("inlineCode",{parentName:"p"},"create()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: toolbox => toolbox.print.info('hi!') })\n  .checkForUpdates(5)\n  .create()\n")),(0,a.kt)("p",null,"This command applies the configuration that you were just chaining, and turns it into a ",(0,a.kt)("inlineCode",{parentName:"p"},"runtime cli")," which supports calling ",(0,a.kt)("inlineCode",{parentName:"p"},"run()"),"."),(0,a.kt)("p",null,"And now we're ready to run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cli.run()\n")),(0,a.kt)("p",null,"With no parameters, ",(0,a.kt)("inlineCode",{parentName:"p"},"gluegun")," will parse the command line arguments looking for the command to run."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'# list the plugins\n$ movie\n\n# run a command\n$ movie quote\n\n# run a command with options\n$ movie quote --funny\n\n# run a command with arguments\n$ movie actors Kingpin\n\n# run a command with arguments & options\n$ movie producers "Planes, Trains, & Automobiles" --sort age\n')),(0,a.kt)("h2",{id:"run"},"run"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"gluegun")," can also be ",(0,a.kt)("inlineCode",{parentName:"p"},"run()")," with options."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"await cli.run('quote random \"*johnny\"', {\n  funny: true,\n  genre: 'Horror',\n  weapon: 'axe',\n})\n")),(0,a.kt)("p",null,"There's a few situations that make this useful."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Maybe you like to use ",(0,a.kt)("inlineCode",{parentName:"li"},"meow")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"commander")," to parse the command line."),(0,a.kt)("li",{parentName:"ol"},"Maybe your interface isn't a CLI."),(0,a.kt)("li",{parentName:"ol"},"Maybe you want to run several commands in a row."),(0,a.kt)("li",{parentName:"ol"},"Maybe this is your program and you don't like strangers telling you how to code.")),(0,a.kt)("p",null,"Bottom line is, you get to pick. It's yours. ",(0,a.kt)("inlineCode",{parentName:"p"},"gluegun")," is just glue."),(0,a.kt)("h2",{id:"configuration"},"configuration"),(0,a.kt)("p",null,"Each plugin can have its own configuration file where it places defaults. These defaults can then be overridden by reading defaults from a configuration file or entry in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),". We use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/davidtheclark/cosmiconfig"},"cosmiconfig")," for this."),(0,a.kt)("p",null,"It will read the plugin name from the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," key and the defaults will be read from the ",(0,a.kt)("inlineCode",{parentName:"p"},"defaults")," section. Each section underneath ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," can be used to override the sections of the plugin. Since that was horribly explained, here's an example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// in movies.config.js\nmodule.exports = {\n  name: 'movies',\n  defaults: {\n    movie: {\n      cache: '~/.movies/cache',\n    },\n    another: {\n      count: 100,\n    },\n  },\n}\n")))}d.isMDXComponent=!0}}]);