"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[3689],{5747:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var d=c(4848),i=c(8453);const r={sidebar_position:400},t="Types",l={id:"react-native-mlkit/face-detection/types",title:"Types",description:"RNMLKitFaceDetectionResult",source:"@site/docs/react-native-mlkit/face-detection/types.md",sourceDirName:"react-native-mlkit/face-detection",slug:"/react-native-mlkit/face-detection/types",permalink:"/react-native-mlkit/face-detection/types",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:400,frontMatter:{sidebar_position:400},sidebar:"React Native MLKit",previous:{title:"Options",permalink:"/react-native-mlkit/face-detection/options"},next:{title:"FAQ / Troubleshooting",permalink:"/react-native-mlkit/face-detection/faq-troubleshooting"}},o={},s=[{value:"<code>RNMLKitFaceDetectionResult</code>",id:"rnmlkitfacedetectionresult",level:2},{value:"<code>RNMLKitFace</code>",id:"rnmlkitface",level:2},{value:"<code>FaceLandmarkType</code>",id:"facelandmarktype",level:2},{value:"<code>RNMLKitFaceLandmark</code>",id:"rnmlkitfacelandmark",level:2},{value:"<code>RNMLKitFaceContour</code>",id:"rnmlkitfacecontour",level:2},{value:"<code>FaceContourType</code>",id:"facecontourtype",level:2},{value:"<code>RNMLKitFaceDetectorOptions</code>",id:"rnmlkitfacedetectoroptions",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h1,{id:"types",children:"Types"}),"\n",(0,d.jsx)(n.h2,{id:"rnmlkitfacedetectionresult",children:(0,d.jsx)(n.code,{children:"RNMLKitFaceDetectionResult"})}),"\n",(0,d.jsx)(n.p,{children:"Represents the result of the face detection process, containing an array of detected faces, a success flag, any\npotential errors, and the path to the image."}),"\n",(0,d.jsxs)(n.p,{children:["| Property | Description | Type | Default |\n| ----------- | ----------------------------------------------- | --------------- | ------- | ------ |\n| ",(0,d.jsx)(n.code,{children:"faces"}),"     | Array of detected faces. | ",(0,d.jsx)(n.code,{children:"RNMLKitFace[]"})," | - |\n| ",(0,d.jsx)(n.code,{children:"success"}),"   | Indicates if the face detection was successful. | ",(0,d.jsx)(n.code,{children:"boolean"}),"       | - |\n| ",(0,d.jsx)(n.code,{children:"error"}),"     | Any potential errors during detection. | ",(0,d.jsx)(n.code,{children:"string | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"imagePath"})," | Path to the image being processed. | ",(0,d.jsx)(n.code,{children:"string"}),"        | - |"]}),"\n",(0,d.jsx)(n.h2,{id:"rnmlkitface",children:(0,d.jsx)(n.code,{children:"RNMLKitFace"})}),"\n",(0,d.jsx)(n.p,{children:"Details of each detected face, including frame, landmarks, contours, and various other properties."}),"\n",(0,d.jsxs)(n.p,{children:["| Property | Description | Type | Default |\n| ---------------------------- | ----------------------------------------------------------- | ----------------------- | ------- | ------ |\n| ",(0,d.jsx)(n.code,{children:"frame"}),"                      | Frame detailing the position and size of the detected\nface. | ",(0,d.jsx)(n.code,{children:"{x, y, width, height}"})," | - |\n| ",(0,d.jsx)(n.code,{children:"landmarks"}),"                  | Array of landmarks on the face. | ",(0,d.jsx)(n.code,{children:"RNMLKitFaceLandmark[]"})," | - |\n| ",(0,d.jsx)(n.code,{children:"contours"}),"                   | Array of contours on the face. | ",(0,d.jsx)(n.code,{children:"RNMLKitFaceContour[]"}),"  | - |\n| ",(0,d.jsx)(n.code,{children:"hasTrackingID"}),"              | Indicates if the face has a tracking ID. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"trackingID"}),"                 | The tracking ID of the face, if available. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"hasHeadEulerAngleX"}),"         | Indicates if the head Euler angle X is available. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"headEulerAngleX"}),"            | The head Euler angle X of the face, if available. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"hasHeadEulerAngleY"}),"         | Indicates if the head Euler angle Y is available. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"headEulerAngleY"}),"            | The head Euler angle Y of the face, if available. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"hasHeadEulerAngleZ"}),"         | Indicates if the head Euler angle Z is available. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"headEulerAngleZ"}),"            | The head Euler angle Z of the face, if available. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"hasSmilingProbability"}),"      | Indicates if the smiling probability is available. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"smilingProbability"}),"         | The smiling probability of the face, if available. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"hasLeftEyeOpenProbability"}),"  | Indicates if the left eye open probability is\navailable. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"leftEyeOpenProbability"}),"     | The left eye open probability of the face, if available. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"hasRightEyeOpenProbability"})," | Indicates if the right eye open probability is\navailable. | ",(0,d.jsx)(n.code,{children:"boolean"}),"               | - |\n| ",(0,d.jsx)(n.code,{children:"rightEyeOpenProbability"}),"    | The right eye open probability of the face, if\navailable. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |"]}),"\n",(0,d.jsx)(n.h2,{id:"facelandmarktype",children:(0,d.jsx)(n.code,{children:"FaceLandmarkType"})}),"\n",(0,d.jsx)(n.p,{children:"Types of landmarks that can be detected on a face."}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.th,{children:"Landmark"})})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftEye"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftMouth"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftEar"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"noseBase"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftCheek"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightEye"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightMouth"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightEar"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightCheek"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"bottomMouth"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftEarTip"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightEarTip"})})})]})]}),"\n",(0,d.jsx)(n.h2,{id:"rnmlkitfacelandmark",children:(0,d.jsx)(n.code,{children:"RNMLKitFaceLandmark"})}),"\n",(0,d.jsx)(n.p,{children:"Specific landmarks detected on a face."}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Property"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Default"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"type"})}),(0,d.jsx)(n.td,{children:"Type of the landmark."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"FaceLandmarkType"})}),(0,d.jsx)(n.td,{children:"-"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"position"})}),(0,d.jsx)(n.td,{children:"Position of the landmark on the face."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"{x, y}"})}),(0,d.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"rnmlkitfacecontour",children:(0,d.jsx)(n.code,{children:"RNMLKitFaceContour"})}),"\n",(0,d.jsx)(n.p,{children:"Specific contours detected on a face."}),"\n",(0,d.jsxs)(n.p,{children:["| Property | Description | Type | Default |\n| -------- | ----------------------------------------------------- | ------------------------------ | ------- | ------ |\n| ",(0,d.jsx)(n.code,{children:"type"}),"   | Type of the contour. | ",(0,d.jsx)(n.code,{children:"FaceContourType"}),"              | - |\n| ",(0,d.jsx)(n.code,{children:"points"})," | Array of points representing the contour on the face. | ",(0,d.jsx)(n.code,{children:"Array<{x: number, y: number}> | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |"]}),"\n",(0,d.jsx)(n.h2,{id:"facecontourtype",children:(0,d.jsx)(n.code,{children:"FaceContourType"})}),"\n",(0,d.jsx)(n.p,{children:"Types of contours that can be detected on a face."}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.th,{children:"Contour"})})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"faceOval"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftEyebrowTop"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftEyebrowBottom"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightEyebrowTop"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightEyebrowBottom"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftEye"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightEye"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"upperLipTop"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"upperLipBottom"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"lowerLipTop"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"lowerLipBottom"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"noseBridge"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"noseBottom"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leftCheekCenter"})})}),(0,d.jsx)(n.tr,{children:(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"rightCheekCenter"})})})]})]}),"\n",(0,d.jsx)(n.h2,{id:"rnmlkitfacedetectoroptions",children:(0,d.jsx)(n.code,{children:"RNMLKitFaceDetectorOptions"})}),"\n",(0,d.jsx)(n.p,{children:"Options for the face detector."}),"\n",(0,d.jsxs)(n.p,{children:["| Property | Description | Type | Default |\n| -------------------- | ----------------------------------------------------------- | -------- | ------- | ------ |\n| ",(0,d.jsx)(n.code,{children:"performanceMode"}),"    | The performance mode for the detector. | ",(0,d.jsx)(n.code,{children:"string"})," | - |\n| ",(0,d.jsx)(n.code,{children:"landmarkMode"}),"       | Indicates if landmark detection should be enabled. | ",(0,d.jsx)(n.code,{children:"boolean | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"contourMode"}),"        | Indicates if contour detection should be enabled. | ",(0,d.jsx)(n.code,{children:"boolean | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"classificationMode"})," | Indicates if classification mode should be enabled. | ",(0,d.jsx)(n.code,{children:"boolean | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"minFaceSize"}),"        | Minimum size of the face for detection. | ",(0,d.jsx)(n.code,{children:"number | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |\n| ",(0,d.jsx)(n.code,{children:"isTrackingEnabled"}),"  | Indicates if tracking should be enabled for detected faces. | ",(0,d.jsx)(n.code,{children:"boolean | null"}),"   | ",(0,d.jsx)(n.code,{children:"null"})," |"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,n,c)=>{c.d(n,{R:()=>t,x:()=>l});var d=c(6540);const i={},r=d.createContext(i);function t(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),d.createElement(r.Provider,{value:n},e.children)}}}]);