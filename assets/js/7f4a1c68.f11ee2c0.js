"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[2062],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),g=i,d=u["".concat(s,".").concat(g)]||u[g]||y[g]||o;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=g;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:80},l="Styling Ignite apps",a={unversionedId:"ignite-cli/concept/Styling",id:"ignite-cli/concept/Styling",title:"Styling Ignite apps",description:"Ignite's approach to styling individual components is, like many other things in Ignite, straightforward and direct.",source:"@site/docs/ignite-cli/concept/Styling.md",sourceDirName:"ignite-cli/concept",slug:"/ignite-cli/concept/Styling",permalink:"/ignite-cli/concept/Styling",draft:!1,tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80},sidebar:"Ignite",previous:{title:"Concepts &amp; Features",permalink:"/ignite-cli/concept/Concepts"},next:{title:"Navigation in Ignite",permalink:"/ignite-cli/concept/Navigation"}},s={},p=[{value:"Sharing Styles via Presets",id:"sharing-styles-via-presets",level:2},{value:"Styling Workflow",id:"styling-workflow",level:2}],c={toc:p},u="wrapper";function y(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"styling-ignite-apps"},"Styling Ignite apps"),(0,i.kt)("p",null,"Ignite's approach to styling individual components is, like many other things in Ignite, straightforward and direct."),(0,i.kt)("p",null,"If you're looking to set app-wide styles such as fonts/typography or colors, check out the ",(0,i.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/theming/"},"Theming")," documentation."),(0,i.kt)("p",null,"We don't use ",(0,i.kt)("inlineCode",{parentName:"p"},"StyleSheet.create()")," as a general rule, as it doesn't provide any real benefits over bare objects."),(0,i.kt)("p",null,"We instead use a strategy of bare JS objects, colocated with our components (usually below the component in the file), prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),", and typed with TypeScript:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import { View, ViewStyle } from "react-native"\nimport { colors } from "../theme"\n\nconst MyComponent = () => {\n  return <View style={$container}>...</View>\n}\n\nconst $container: ViewStyle = {\n  flex: 1,\n  backgroundColor: colors.background,\n}\n')),(0,i.kt)("p",null,"Very often, we use ",(0,i.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/"},"components with presets")," to share styles across our whole app."),(0,i.kt)("p",null,"With this strategy, you can tell a variable is a style if it has the $ prefix. You can also spread in other styles to compose styles:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const $bold: TextStyle = {\n  fontWeight: "bold",\n}\nconst $larger: TextStyle = {\n  fontSize: 22,\n}\nconst $title: TextStyle = {\n  ...$bold,\n  ...$larger,\n}\n')),(0,i.kt)("h2",{id:"sharing-styles-via-presets"},"Sharing Styles via Presets"),(0,i.kt)("p",null,"Most of the components we include with Ignite include a ",(0,i.kt)("inlineCode",{parentName:"p"},"preset")," property:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'<View preset="heading" text="My Header" />\n')),(0,i.kt)("p",null,"Presets are defined in the component file itself, usually something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const $presets = {\n  default: $baseStyle,\n\n  bold: [$baseStyle, $fontWeightStyles.bold] as StyleProp<TextStyle>,\n\n  heading: [$baseStyle, $sizeStyles.xxl, $fontWeightStyles.bold] as StyleProp<TextStyle>,\n\n  subheading: [$baseStyle, $sizeStyles.lg, $fontWeightStyles.medium] as StyleProp<TextStyle>,\n}\n")),(0,i.kt)("p",null,"These presets are usually composed of other styles, using arrays (which React Native will properly merge)."),(0,i.kt)("p",null,'So, let\'s say we want a button that is a destructive action. We might add a "destructive" preset to the Button component.'),(0,i.kt)("p",null,"The preset might look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const $warning = { backgroundColor: "red", color: "white" }\n\nconst $viewPresets = {\n  destructive: [$baseViewStyle, $warning],\n}\n')),(0,i.kt)("p",null,"You can then use it with your Button like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'<Button\n  text="Delete"\n  // set the preset here\n  preset="destructive"\n  onPress={() => thisItem.destroy()}\n/>\n')),(0,i.kt)("h2",{id:"styling-workflow"},"Styling Workflow"),(0,i.kt)("p",null,"TODO: Finish this section?"))}y.isMDXComponent=!0}}]);