"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[3576],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},9763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"reactotron/plugins/mst","title":"Mobx State Tree","description":"Behold! A plugin for Reactotron for working with mobx-state-tree.","source":"@site/docs/reactotron/plugins/mst.md","sourceDirName":"reactotron/plugins","slug":"/reactotron/plugins/mst","permalink":"/reactotron/plugins/mst","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Mobx State Tree"},"sidebar":"Reactotron","previous":{"title":"Benchmarking","permalink":"/reactotron/plugins/benchmark"},"next":{"title":"Networking","permalink":"/reactotron/plugins/networking"}}');var s=n(4848),r=n(8453);const i={title:"Mobx State Tree"},a="reactotron-mst",c={},l=[{value:"filter",id:"filter",level:3},{value:"queryMode",id:"querymode",level:3},{value:"Phase 1",id:"phase-1",level:3},{value:"Single Tree",id:"single-tree",level:3},{value:"<code>flow()</code>-based actions issues",id:"flow-based-actions-issues",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"reactotron-mst",children:"reactotron-mst"})}),"\n",(0,s.jsx)(t.p,{children:"Behold! A plugin for Reactotron for working with mobx-state-tree."}),"\n",(0,s.jsx)(t.h1,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:["This is a plugin for Reactotron, so you'll need either ",(0,s.jsx)(t.code,{children:"reactotron-react-native"})," or ",(0,s.jsx)(t.code,{children:"reactotron-react-dom"})," installed first."]}),"\n",(0,s.jsxs)(t.p,{children:["This is also a plugin for ",(0,s.jsx)(t.code,{children:"mobx-state-tree"}),", so you'll also need that installed as well."]}),"\n",(0,s.jsx)(t.h1,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(t.p,{children:["Add a dev-dependency to ",(0,s.jsx)(t.code,{children:"reactotron-mst"})," to your app."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"yarn add reactotron-mst --dev\n"})}),"\n",(0,s.jsx)(t.p,{children:"or"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npm i reactotron-mst --save-dev\n"})}),"\n",(0,s.jsx)(t.h1,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(t.p,{children:"To make Reactotron aware of this plugin, go to the file you are configuring Reactotron currently and add this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// import the plugin\nimport { mst } from "reactotron-mst"\n\n// tell Reactotron to use this plugin\nReactotron.use(mst())\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This will bestow Reactotron the power to track ",(0,s.jsx)(t.code,{children:"mobx-state-tree"})," nodes."]}),"\n",(0,s.jsx)(t.h1,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["Finally, you need to give ",(0,s.jsx)(t.code,{children:"reactotron-mst"})," your root tree node."]}),"\n",(0,s.jsx)(t.p,{children:"Here's an example of that in action:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// bring in Reactotron\nimport * as Reactotron from "reactotron-react-native"\n\n// bring in your mst model\nimport { MyModel } from "./my-model"\n\n// create an instance of your model\nconst myTree = MyModel.create()\n\n// let reactotron-mst know about it\nReactotron.trackMstNode(myTree)\n'})}),"\n",(0,s.jsx)(t.h1,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(t.p,{children:["When you ",(0,s.jsx)(t.code,{children:"use()"})," the ",(0,s.jsx)(t.code,{children:"reactotron-mst"}),", you can also pass options."]}),"\n",(0,s.jsx)(t.h3,{id:"filter",children:"filter"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"filter"})," property provides a way to control what is sent to Reactotron. It is a function which takes an ",(0,s.jsx)(t.a,{href:"https://github.com/mobxjs/mobx-state-tree/blob/master/docs/middleware.md#call-attributes",children:(0,s.jsx)(t.code,{children:"IMiddlewareEvent"})})," and returns a ",(0,s.jsx)(t.code,{children:"boolean"}),". If you return ",(0,s.jsx)(t.code,{children:"true"}),", the message will be sent to the Reactotron app. ",(0,s.jsx)(t.code,{children:"false"})," will ignore this message."]}),"\n",(0,s.jsxs)(t.p,{children:["Here's an example which will stop all ",(0,s.jsx)(t.code,{children:"postProcessSnapshot"}),"-based actions from jumping the wire."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import Tron from "reactotron-react-native"\nimport { mst } from "reactotron-mst"\n\nconst RX = /postProcessSnapshot/\nconst filter = (event) => RX.test(event.name) === false\n\nTron.use(mst({ filter }))\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The default value for ",(0,s.jsx)(t.code,{children:"filter"})," if you don't provide it is ",(0,s.jsx)(t.code,{children:"() => true"}),", which means everything gets passed to Reactotron."]}),"\n",(0,s.jsx)(t.h3,{id:"querymode",children:"queryMode"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"queryMode"})," property provides a way to switch between subscribing to live state or snapshots. The only time you'll want to subscribe to snapshots instead of live state is when verifying transitory state (via ",(0,s.jsx)(t.code,{children:"postProcessSnapshot"}),") is not persisted."]}),"\n",(0,s.jsx)(t.h1,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"trackMstNode()"})," function will only be available after you setup the ",(0,s.jsx)(t.code,{children:"reactotron-mst"})," plugin. Make sure you do the previous setup step first or you'll see an error that says, ",(0,s.jsx)(t.code,{children:"trackMstNode is not a function"}),"."]}),"\n",(0,s.jsx)(t.h1,{id:"caveats",children:"Caveats"}),"\n",(0,s.jsx)(t.h3,{id:"phase-1",children:"Phase 1"}),"\n",(0,s.jsxs)(t.p,{children:["This plugin hooks into Reactotron just like the ",(0,s.jsx)(t.code,{children:"redux"})," one. So the basics are in place, but it'll be a much nicer experience once we start introducing some custom views specifically for ",(0,s.jsx)(t.code,{children:"mobx-state-tree"}),". Consider this plugin's status: phase 1 right now. \ud83d\ude05"]}),"\n",(0,s.jsx)(t.h3,{id:"single-tree",children:"Single Tree"}),"\n",(0,s.jsxs)(t.p,{children:["Unlike ",(0,s.jsx)(t.code,{children:"redux"}),", ",(0,s.jsx)(t.code,{children:"mobx-state-tree"})," doesn't have to have a single root node. I personally find it easier to set it up like this, though."]}),"\n",(0,s.jsxs)(t.p,{children:["Currently, ",(0,s.jsx)(t.code,{children:"reactotron-mst"})," only supports tracking 1 tree. Multi-tree support is planned, but requires a bit of retooling of the Reactotron app to support multiple states."]}),"\n",(0,s.jsxs)(t.p,{children:["As a short-term hack, we might be able to find a way to do this by using a prefix to identify which tree you intend to work with. For example, if you would like to subscribe to a piece of state in a different tree, perhaps we could do something like this: ",(0,s.jsx)(t.code,{children:"$tree3.currentUser.password"}),"."]}),"\n",(0,s.jsxs)(t.h3,{id:"flow-based-actions-issues",children:[(0,s.jsx)(t.code,{children:"flow()"}),"-based actions issues"]}),"\n",(0,s.jsxs)(t.p,{children:["Synchronous actions work well, however there's some issues with async actions when using the ",(0,s.jsx)(t.code,{children:"mobx-state-tree"})," ",(0,s.jsx)(t.code,{children:"flow()"})," function. We're going to have to introduce a new UI view similar to ",(0,s.jsx)(t.code,{children:"redux-saga"})," to display this. In the meantime, the action which kicks off the flow will be logged immediate and the return value will be untracked (for now... sorry!)."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);