"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[8773],{2075:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ignite-cli/boilerplate/app/navigators/AppNavigator.tsx","title":"AppNavigator.tsx","description":"If you open the file app/navigators/AppNavigator.tsx up, you\'ll find the AppNavigator and the AppStack.","source":"@site/docs/ignite-cli/boilerplate/app/navigators/AppNavigator.tsx.md","sourceDirName":"ignite-cli/boilerplate/app/navigators","slug":"/ignite-cli/boilerplate/app/navigators/AppNavigator.tsx","permalink":"/ignite-cli/boilerplate/app/navigators/AppNavigator.tsx","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"Ignite","previous":{"title":"Navigation in Ignite","permalink":"/ignite-cli/boilerplate/app/navigators/Navigation"},"next":{"title":"navigationUtilities.ts","permalink":"/ignite-cli/boilerplate/app/navigators/navigationUtilities.ts"}}');var i=a(4848),o=a(8453);const r={},s="AppNavigator.tsx",p={},c=[];function l(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"appnavigatortsx",children:"AppNavigator.tsx"})}),"\n",(0,i.jsxs)(t.p,{children:["If you open the file ",(0,i.jsx)(t.code,{children:"app/navigators/AppNavigator.tsx"})," up, you'll find the AppNavigator and the AppStack."]}),"\n",(0,i.jsx)(t.p,{children:"The AppNavigator is the root navigator for your whole app. It will have the navigation container and wrap the AppStack."}),"\n",(0,i.jsxs)(t.p,{children:["The AppStack is a native stack navigator (via ",(0,i.jsx)(t.a,{href:"https://reactnavigation.org/docs/hello-react-navigation#creating-a-native-stack-navigator",children:"React Navigation"}),") and contains all the screens and subnavigators of your app."]}),"\n",(0,i.jsxs)(t.p,{children:["In the case of Ignite's demo code, it is prepared with an example flow for an app requiring authentication. The screens included within the AppStack are dependent on value of ",(0,i.jsx)(t.code,{children:"isAuthenticated"})," from the ",(0,i.jsx)(t.code,{children:"useAuth()"})," hook. If in an unauthenticated state, the only screen to be shown will be the ",(0,i.jsx)(t.code,{children:"LoginScreen"}),". Otherwise, that screen is left out of the navigator and the user is presented with the ",(0,i.jsx)(t.code,{children:"WelcomeScreen"})," and screens that fall under the ",(0,i.jsx)(t.code,{children:"DemoNavigator"})]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>s});var n=a(6540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);