"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[6342],{3709:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=n(4848),o=n(8453);const a={},i="Context folder",r={id:"ignite-cli/boilerplate/app/context/Context",title:"Context folder",description:"The context folder is where you can put your React context providers or any other state management solutions you choose to use in your Ignited app.",source:"@site/docs/ignite-cli/boilerplate/app/context/Context.md",sourceDirName:"ignite-cli/boilerplate/app/context",slug:"/ignite-cli/boilerplate/app/context/",permalink:"/ignite-cli/boilerplate/app/context/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"Ignite",previous:{title:"Config folder",permalink:"/ignite-cli/boilerplate/app/config/"},next:{title:"Devtools Folder",permalink:"/ignite-cli/boilerplate/app/devtools/"}},l={},c=[{value:"State management solutions",id:"state-management-solutions",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"context-folder",children:"Context folder"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"context"})," folder is where you can put your ",(0,s.jsx)(t.a,{href:"https://react.dev/learn/passing-data-deeply-with-context",children:"React context providers"})," or any other state management solutions you choose to use in your Ignited app."]}),"\n",(0,s.jsxs)(t.p,{children:["Ignite used to include ",(0,s.jsx)(t.a,{href:"https://mobx-state-tree.js.org/",children:"mobx-state-tree"})," as the default state management solution, but over time our projects have had more and more diverse state management solutions. We still love MST, and it was our go-to solution for many years, but shipping it by default with Ignite makes less sense now that there are so many other great options out there. Since we haven't settled on a single state management solution, simple React contexts are the default in this boilerplate."]}),"\n",(0,s.jsx)(t.p,{children:"Currently this folder contains the following React contexts that are meant to be simple examples of how to use React context in your app:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"AuthContext"}),": This is a basic context that provides the demo app with a way to manage simple authentication state. We persist the data using MMKV hooks in this context provider. The app can consume the AuthContext wih the ",(0,s.jsx)(t.code,{children:"useAuth"})," hook."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"EpisodeContext"}),": This context provides the demo app with a way to manage the list of episodes in the demo podcast screen. This context provides a ",(0,s.jsx)(t.code,{children:"useEpisodes"})," hook that can be used to fetch the episodes and manage the state of the list."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"state-management-solutions",children:"State management solutions"}),"\n",(0,s.jsx)(t.p,{children:"There are many state management solutions available for React Native apps. React context comes built in and is a is a reasonable solution for many apps. But you may want to consider other solutions depending on your app's complexity and needs."}),"\n",(0,s.jsx)(t.p,{children:"Here are some popular state management solutions you might consider (not in any particular order):"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Redux using ",(0,s.jsx)(t.a,{href:"https://github.com/reduxjs/redux-toolkit",children:"Redux Toolkit"}),": A predictable state container for JavaScript apps. It is widely used and has a large ecosystem of libraries and tools."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://mobx.js.org/README.html",children:"MobX"}),": A simple, scalable state management solution that uses observable data structures."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://mobx-state-tree.js.org/",children:"Mobx State Tree (MST)"}),': If MobX is a state management "engine", then MobX-State-Tree is a luxury car. MST gives you the structure, tools, and other features to get you where you\'re going.']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/pmndrs/zustand",children:"Zustand"}),": A small, fast and scalable bearbones state-management solution using simplified flux principles."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/LegendApp/legend-state",children:"Legend State"}),": A super fast all-in-one state and sync library."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://react-query.tanstack.com/",children:"React Query"}),": A powerful data-fetching library that can also manage local state."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://xstate.js.org/",children:"XState"}),": Uses event-driven programming, state machines, statecharts, and the actor model to handle complex logic in predictable, robust, and visual ways."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6540);const o={},a=s.createContext(o);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);