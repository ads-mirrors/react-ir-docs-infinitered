"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[6693],{1853:(i,n,e)=>{e.r(n),e.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=e(4848),s=e(8453);const o={},l=void 0,r={id:"ignite-cli/boilerplate/plugins/Plugins",title:"Plugins",description:"app/plugins Directory in Ignite Apps",source:"@site/docs/ignite-cli/boilerplate/plugins/Plugins.md",sourceDirName:"ignite-cli/boilerplate/plugins",slug:"/ignite-cli/boilerplate/plugins/",permalink:"/ignite-cli/boilerplate/plugins/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"Ignite",previous:{title:"ios",permalink:"/ignite-cli/boilerplate/ios"},next:{title:"withSplashScreen Config Plugin",permalink:"/ignite-cli/boilerplate/plugins/withSplashScreen"}},p={},c=[{value:"<code>app/plugins</code> Directory in Ignite Apps",id:"appplugins-directory-in-ignite-apps",level:2},{value:"Adding Custom Plugins",id:"adding-custom-plugins",level:3},{value:"Key Points",id:"key-points",level:2}];function u(i){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...i.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"appplugins-directory-in-ignite-apps",children:[(0,t.jsx)(n.code,{children:"app/plugins"})," Directory in Ignite Apps"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"app/plugins"})," directory is a dedicated space within the Ignite boilerplate for managing Expo Config Plugins. These plugins are used to customize the native configuration of your app without altering the native code directly."]}),"\n",(0,t.jsx)(n.h3,{id:"adding-custom-plugins",children:"Adding Custom Plugins"}),"\n",(0,t.jsx)(n.p,{children:"To add a custom plugin:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create a Plugin"}),": In ",(0,t.jsx)(n.code,{children:"app/plugins"}),", define your plugin in a TypeScript file, exporting a function that modifies the ExpoConfig."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integrate the Plugin"}),": In ",(0,t.jsx)(n.code,{children:"app.config.ts"}),", import your plugin and add it to the ",(0,t.jsx)(n.code,{children:"plugins"})," array."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// In app.config.ts\nplugins: [...existingPlugins, require("./plugins/yourCustomPlugin").yourCustomPlugin]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Config plugins extend app configuration, automating native module integration."}),"\n",(0,t.jsxs)(n.li,{children:["Create plugins in ",(0,t.jsx)(n.code,{children:"app/plugins"})," and add them to ",(0,t.jsx)(n.code,{children:"app.config.ts"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"For complex setups, refer to mods but use them with caution."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For detailed information on creating and using config plugins, refer to ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/config-plugins/introduction/",children:"Expo's Config Plugins documentation"}),"."]})]})}function d(i={}){const{wrapper:n}={...(0,s.R)(),...i.components};return n?(0,t.jsx)(n,{...i,children:(0,t.jsx)(u,{...i})}):u(i)}},8453:(i,n,e)=>{e.d(n,{R:()=>l,x:()=>r});var t=e(6540);const s={},o=t.createContext(s);function l(i){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof i?i(n):{...n,...i}}),[n,i])}function r(i){let n;return n=i.disableParentContext?"function"==typeof i.components?i.components(s):i.components||s:l(i.components),t.createElement(o.Provider,{value:n},i.children)}}}]);