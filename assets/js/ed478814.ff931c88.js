"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[9375],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(g,i(i({ref:t},c),{},{components:n})):o.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},i="Ignite Built-in Components",l={unversionedId:"ignite-cli/boilerplate/components/Components",id:"ignite-cli/boilerplate/components/Components",title:"Ignite Built-in Components",description:"Ignite comes with a number of customizable built-in React Native components -- sort of a lightweight design system, in a way. It's the system we (at Infinite Red) tend to use the most often with our own custom mobile designs, and is designed to emphasize flexibility and customizability over out-of-the-box power.",source:"@site/docs/ignite-cli/boilerplate/components/Components.md",sourceDirName:"ignite-cli/boilerplate/components",slug:"/ignite-cli/boilerplate/components/",permalink:"/ignite-cli/boilerplate/components/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"Ignite",previous:{title:"Explanation of the Ignite folder structure",permalink:"/ignite-cli/boilerplate/"},next:{title:"AutoImage",permalink:"/ignite-cli/boilerplate/components/AutoImage"}},p={},s=[{value:"Components",id:"components",level:2},{value:"AutoImage",id:"autoimage",level:3},{value:"Button",id:"button",level:3},{value:"Card",id:"card",level:3},{value:"EmptyState",id:"emptystate",level:3},{value:"Header",id:"header",level:3},{value:"Icon",id:"icon",level:3},{value:"Screen",id:"screen",level:3},{value:"Text",id:"text",level:3},{value:"TextField",id:"textfield",level:3},{value:"Toggle",id:"toggle",level:3},{value:"Custom Components",id:"custom-components",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ignite-built-in-components"},"Ignite Built-in Components"),(0,a.kt)("p",null,"Ignite comes with a number of customizable built-in React Native components -- sort of a lightweight design system, in a way. It's the system we (at Infinite Red) tend to use the most often with our own custom mobile designs, and is designed to emphasize flexibility and customizability ",(0,a.kt)("em",{parentName:"p"},"over")," out-of-the-box power."),(0,a.kt)("p",null,"There are a number of other options out there that work great with Ignite -- ",(0,a.kt)("a",{parentName:"p",href:"https://akveo.github.io/react-native-ui-kitten/"},"UI Kitten"),", ",(0,a.kt)("a",{parentName:"p",href:"https://reactnativeelements.com/"},"RN Elements"),", and more. But if you're building something with a totally custom design, Ignite's built-in components work great."),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("p",null,"Here's a summary of each component. Click through to view detailed documentation and code examples!"),(0,a.kt)("h3",{id:"autoimage"},"AutoImage"),(0,a.kt)("p",null,"This is a wrapper around React Native's ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/image"},"Image")," component, which automatically resizes the image to fit the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<AutoImage\n  source={{ uri: "https://pbs.twimg.com/profile_images/845384502067159040/pqF2RQ2q_400x400.jpg" }}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/AutoImage"},"Full AutoImage Component Documentation")),(0,a.kt)("h3",{id:"button"},"Button"),(0,a.kt)("p",null,"This is a component that renders a ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/touchableopacity"},(0,a.kt)("inlineCode",{parentName:"a"},"TouchableOpacity"))," with given text or children."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Button\n  text="Click It"\n  tx="button.clickIt"\n  preset="primary"\n  onPress={() => Alert.alert("pressed")}\n  style={[{ paddingVertical: 100 }, { borderRadius: 0 }]}\n  textStyle={[{ fontSize: 20 }, { color: "#a511dc" }]}\n/>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Button onPress={() => Alert.alert("pressed")}>\n  <Text>Click It</Text>\n</Button>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Button"},"Full Button Component Documentation")),(0,a.kt)("h3",{id:"card"},"Card"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Card")," component is useful for displaying related information in a contained way. Where you'll use ",(0,a.kt)("inlineCode",{parentName:"p"},"ListItem")," for horizontal information, ",(0,a.kt)("inlineCode",{parentName:"p"},"Card")," can be used for vertical information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Card\n  preset="reversed"\n  verticalAlignment="space-between"\n  LeftComponent={<Text>Left</Text>}\n  RightComponent={<Text>Right</Text>}\n  heading="Card Heading"\n  headingStyle={{ color: "#a511dc" }}\n  HeadingTextProps={{ weight: "bold" }}\n  content="Card Content"\n  contentStyle={{ color: "#a511dc" }}\n  ContentTextProps={{ weight: "light" }}\n  footer="Card Footer"\n  footerStyle={{ color: "#a511dc" }}\n  FooterTextProps={{ weight: "medium" }}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Card"},"Full Card Component Documentation")),(0,a.kt)("h3",{id:"emptystate"},"EmptyState"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EmptyState")," component can be used when there is no data to display and direct the user on how to proceed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<EmptyState\n  preset="default"\n  style={{ padding: 10 }}\n  imageSource={require("../../assets/images/sad-face.png")}\n  imageStyle={{ height: 400, width: 400 }}\n  ImageProps={{ resizeMode: "contain" }}\n  heading="EmptyState Heading"\n  headingStyle={{ color: "#a511dc" }}\n  HeadingTextProps={{ weight: "bold" }}\n  content="EmptyState Content"\n  contentStyle={{ color: "#a511dc" }}\n  ContentTextProps={{ weight: "light" }}\n  button="Press here"\n  buttonOnPress={handleButtonPress}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/EmptyState"},"Full EmptyState Component Documentation")),(0,a.kt)("h3",{id:"header"},"Header"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Header")," component is a component that will appear at the top of your screen. It is used to hold navigation buttons and the screen title."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Header\n  headerTx="header.title"\n  headerText="Header Title"\n  leftIcon="back"\n  rightIcon="bullet"\n  onLeftPress={() => navigation.goBack()}\n  onRightPress={() => Alert.alert("pressed")}\n  style={{ backgroundColor: "purple" }}\n  titleStyle={{ color: "white" }}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Header"},"Full Header Component Documentation")),(0,a.kt)("h3",{id:"icon"},"Icon"),(0,a.kt)("p",null,"This is a component that renders an icon."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon\n  icon="back"\n  color="#a511dc"\n  size={30}\n  containerStyle={{ backgroundColor: "#fff" }}\n  style={{ resizeMode: "contain" }}\n  onPress={() => Alert.alert("pressed")}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Icon"},"Full Icon Component Documentation")),(0,a.kt)("h3",{id:"screen"},"Screen"),(0,a.kt)("p",null,"This is a component that renders a screen. It is used to wrap your entire screen, and handles scrolling, ",(0,a.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/handling-safe-area/"},"safe areas"),", and keyboard avoiding behavior."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Screen preset="scroll">\n  <Header headerTitle="screen" />\n  // ... content here ...\n</Screen>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Screen"},"Full Screen Component Documentation")),(0,a.kt)("h3",{id:"text"},"Text"),(0,a.kt)("p",null,"This is an enhanced version of the built-in React Native Text component. It adds internationalization and property presets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Text\n  preset="header"\n  tx="welcome.header"\n  txOptions={{\n    name: rootStore.currentUser.name,\n  }}\n  style={$header}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Text"},"Full Text Component Documentation")),(0,a.kt)("h3",{id:"textfield"},"TextField"),(0,a.kt)("p",null,"This component renders a View with a ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/textinput"},(0,a.kt)("inlineCode",{parentName:"a"},"TextInput"))," and a text label."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const [input, setInput] = useState("")\nconst inputRef = useRef()\n<TextField\n  value={input}\n  onChangeText={setInput}\n  labelTx="signup.name"\n  placeholderTx="signup.nameplaceholder"\n  style={$header}\n  inputStyle={$inputStyle}\n  preset="default"\n  forwardedRef={inputRef}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/TextField"},"Full Text Component Documentation")),(0,a.kt)("h3",{id:"toggle"},"Toggle"),(0,a.kt)("p",null,"This component is a flexible component that can be used to toggle a boolean value. It can be used to render a switch, checkbox, or radio button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Toggle\n  variant="checkbox"\n  value={value}\n  onValueChange={setValue}\n  labelTx="signup.rememberMe"\n  labelStyle={{ color: "#a511dc" }}\n  containerStyle={{ backgroundColor: "#fff" }}\n/>\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/components/Toggle"},"Full Toggle Component Documentation")),(0,a.kt)("h2",{id:"custom-components"},"Custom Components"),(0,a.kt)("p",null,"Ignite includes a generator for creating custom components. If the built in components don't fit your needs, you can create your own."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"npx ignite-cli generate component MyCustomButton")),(0,a.kt)("p",null,"Running the generator will create a new component in the ",(0,a.kt)("inlineCode",{parentName:"p"},"components")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-- app\n  -- components\n    -- MyCustomButton.tsx\n")))}m.isMDXComponent=!0}}]);