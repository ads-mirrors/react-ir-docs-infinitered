"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[3967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=s(n),h=l,m=u["".concat(i,".").concat(h)]||u[h]||c[h]||o;return n?a.createElement(m,p(p({ref:t},d),{},{components:n})):a.createElement(m,p({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,p=new Array(o);p[0]=h;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r[u]="string"==typeof e?e:l,p[1]=r;for(var s=2;s<o;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6436:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const o={sidebar_position:40},p="TextField",r={unversionedId:"ignite-cli/boilerplate/app/components/TextField",id:"ignite-cli/boilerplate/app/components/TextField",title:"TextField",description:"Ignite's TextField Component is an enhanced version of the built-in React Native TextInput component. It consists of TextInput and a Text(./Text.md) label.",source:"@site/docs/ignite-cli/boilerplate/app/components/TextField.md",sourceDirName:"ignite-cli/boilerplate/app/components",slug:"/ignite-cli/boilerplate/app/components/TextField",permalink:"/ignite-cli/boilerplate/app/components/TextField",draft:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"Ignite",previous:{title:"Text",permalink:"/ignite-cli/boilerplate/app/components/Text"},next:{title:"Toggle",permalink:"/ignite-cli/boilerplate/app/components/Toggle"}},i={},s=[{value:"Props",id:"props",level:2},{value:"<code>status</code>",id:"status",level:3},{value:"<code>label</code>",id:"label",level:3},{value:"<code>labelTx</code>",id:"labeltx",level:3},{value:"<code>labelTxOptions</code>",id:"labeltxoptions",level:3},{value:"<code>LabelTextProps</code>",id:"labeltextprops",level:3},{value:"<code>helper</code>",id:"helper",level:3},{value:"<code>helperTx</code>",id:"helpertx",level:3},{value:"<code>helperTxOptions</code>",id:"helpertxoptions",level:3},{value:"<code>HelperTextProps</code>",id:"helpertextprops",level:3},{value:"<code>placeholder</code>",id:"placeholder",level:3},{value:"<code>placeholderTx</code>",id:"placeholdertx",level:3},{value:"<code>placeholderTxOptions</code>",id:"placeholdertxoptions",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>containerStyle</code>",id:"containerstyle",level:3},{value:"<code>inputWrapperStyle</code>",id:"inputwrapperstyle",level:3},{value:"<code>RightAccessory</code> and <code>LeftAccessory</code>",id:"rightaccessory-and-leftaccessory",level:3}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"textfield"},"TextField"),(0,l.kt)("p",null,"Ignite's ",(0,l.kt)("inlineCode",{parentName:"p"},"TextField")," Component is an enhanced version of the built-in React Native ",(0,l.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/textinput"},(0,l.kt)("inlineCode",{parentName:"a"},"TextInput"))," component. It consists of TextInput and a Text(./Text.md) label."),(0,l.kt)("p",null,"With this component you will be able to standardise TextInput component across your app."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'import { TextField } from \'../components\';\n\nconst [input, setInput] = useState("")\n<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  status="error"\n  label="Name"\n  labelTx="login.nameLabel"\n  labelTxOptions={{ name: "John" }}\n  LabelTextProps={{ style: { color: "#FFFFFF" } }}\n  placeholder="John Doe"\n  placeholderTx="login.namePlaceholder"\n  placeholderTxOptions={{ name: "John" }}\n  helper="Enter your name"\n  helperTx="login.nameHelper"\n  helperTxOptions={{ name: "John" }}\n  HelperTextProps={{ style: { color: "#FFFFFF" } }}\n  style={{ backgroundColor: "#BFBFBF" }}\n  containerStyle={{ backgroundColor: "#BFBFBF" }}\n  inputWrapperStyle={{ backgroundColor: "#BFBFBF" }}\n  RightAccessory={() => <Icon icon="check" />}\n  LeftAccessory={() => <Icon icon="bell" />}\n/>\n\n')),(0,l.kt)("h2",{id:"props"},"Props"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TextField")," component accepts all the props of the built-in React Native ",(0,l.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/textinput"},(0,l.kt)("inlineCode",{parentName:"a"},"TextInput"))," component which will be forwarded to the ",(0,l.kt)("inlineCode",{parentName:"p"},"TextInput")," component, as well as the following props:"),(0,l.kt)("h3",{id:"status"},(0,l.kt)("inlineCode",{parentName:"h3"},"status")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"status")," prop is used to set an ",(0,l.kt)("inlineCode",{parentName:"p"},"'error'")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"'disabled'")," state on the component. The default value is ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),". You can use it to show an error style for validations or to disable the component. By default the ",(0,l.kt)("inlineCode",{parentName:"p"},"'error'")," status will set the ",(0,l.kt)("inlineCode",{parentName:"p"},"borderColor")," on the input wrapper to whatever ",(0,l.kt)("inlineCode",{parentName:"p"},"colors.error")," is set to. Setting the status to ",(0,l.kt)("inlineCode",{parentName:"p"},"'disabled'")," will disable editing on the ",(0,l.kt)("inlineCode",{parentName:"p"},"TextInput")," component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} status="error" />\n')),(0,l.kt)("h3",{id:"label"},(0,l.kt)("inlineCode",{parentName:"h3"},"label")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," optional prop is a string that is used to set the label. If this is not set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"labelTx")," prop must be present to set the label. If both are set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," value will be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} label="Name" />\n')),(0,l.kt)("h3",{id:"labeltx"},(0,l.kt)("inlineCode",{parentName:"h3"},"labelTx")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"labelTx")," optional prop is the string key used to look up the translated text for the user's locale. Ignite uses ",(0,l.kt)("a",{parentName:"p",href:"http://i18njs.com/"},(0,l.kt)("inlineCode",{parentName:"a"},"i18n-js"))," for internationalization. If this is not set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," prop must be present to set the label. If both are set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," value will be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} labelTx="signup.name" />\n')),(0,l.kt)("h3",{id:"labeltxoptions"},(0,l.kt)("inlineCode",{parentName:"h3"},"labelTxOptions")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"labelTxOptions")," is an optional prop that is used to pass props to the translation lookup for the header title. This is useful if you need to pass in dynamic values to the translation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  labelTx="signup.name"\n  labelTxOptions={{ name: "John" }}\n  onChangeText={(value) => setInput(value)}\n/>\n')),(0,l.kt)("h3",{id:"labeltextprops"},(0,l.kt)("inlineCode",{parentName:"h3"},"LabelTextProps")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"LabelTextProps")," is an optional prop that is used to pass props to the ",(0,l.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/app/components/Text"},(0,l.kt)("inlineCode",{parentName:"a"},"Text"))," component that renders the label."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  labelTx="signup.name"\n  onChangeText={(value) => setInput(value)}\n  LabelTextProps={{ style: { color: "red" } }}\n/>\n')),(0,l.kt)("h3",{id:"helper"},(0,l.kt)("inlineCode",{parentName:"h3"},"helper")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"helper")," optional prop is a string that is used to set the helper text. If this is not set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"helperTx")," prop must be present to set the helper text. If both are set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"helper")," value will be used. The helper text is rendered with a ",(0,l.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/app/components/Text"},(0,l.kt)("inlineCode",{parentName:"a"},"Text"))," component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} helper="This is a helper text" />\n')),(0,l.kt)("h3",{id:"helpertx"},(0,l.kt)("inlineCode",{parentName:"h3"},"helperTx")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"helperTx")," optional prop is the string key used to look up the translated text for the user's locale. Ignite uses ",(0,l.kt)("a",{parentName:"p",href:"http://i18njs.com/"},(0,l.kt)("inlineCode",{parentName:"a"},"i18n-js"))," for internationalization. If this is not set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"helper")," prop must be present to set the helper text. If both are set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"helper")," value will be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} helperTx="signup.name" />\n')),(0,l.kt)("h3",{id:"helpertxoptions"},(0,l.kt)("inlineCode",{parentName:"h3"},"helperTxOptions")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"helperTxOptions")," is an optional prop that is used to pass props to the translation lookup for the helper text. This is useful if you need to pass in dynamic values to the translation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  helperTx="login.name"\n  helperTxOptions={{ name: "John" }}\n  onChangeText={(value) => setInput(value)}\n/>\n')),(0,l.kt)("h3",{id:"helpertextprops"},(0,l.kt)("inlineCode",{parentName:"h3"},"HelperTextProps")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"HelperTextProps")," is an optional prop that is used to pass props to the ",(0,l.kt)("a",{parentName:"p",href:"/ignite-cli/boilerplate/app/components/Text"},(0,l.kt)("inlineCode",{parentName:"a"},"Text"))," component that renders the helper text."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  helper="Name"\n  onChangeText={(value) => setInput(value)}\n  HelperTextProps={{ style: { color: "red" } }}\n/>\n')),(0,l.kt)("h3",{id:"placeholder"},(0,l.kt)("inlineCode",{parentName:"h3"},"placeholder")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholder")," optional prop is a string that is used to set the placeholder. If this is not set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholderTx")," prop must be present to set the placeholder. If both are set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholder")," value will be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} placeholder="Name" />\n')),(0,l.kt)("h3",{id:"placeholdertx"},(0,l.kt)("inlineCode",{parentName:"h3"},"placeholderTx")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholderTx")," optional prop is the string key used to look up the translated text for the user's locale. Ignite uses ",(0,l.kt)("a",{parentName:"p",href:"http://i18njs.com/"},(0,l.kt)("inlineCode",{parentName:"a"},"i18n-js"))," for internationalization. If this is not set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholder")," prop must be present to set the placeholder. If both are set, the ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholder")," value will be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField value={input} onChangeText={(value) => setInput(value)} placeholderTx="signup.name" />\n')),(0,l.kt)("h3",{id:"placeholdertxoptions"},(0,l.kt)("inlineCode",{parentName:"h3"},"placeholderTxOptions")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholderTxOptions")," is an optional prop that is used to pass props to the translation lookup for the placeholder text. This is useful if you need to pass in dynamic values to the translation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"<TextField value={input} onChangeText={(value) => setInput(value)} />\n")),(0,l.kt)("h3",{id:"style"},(0,l.kt)("inlineCode",{parentName:"h3"},"style")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"style")," optional prop is an object used to override the input style."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  style={{ backgroundColor: "red" }}\n/>\n')),(0,l.kt)("h3",{id:"containerstyle"},(0,l.kt)("inlineCode",{parentName:"h3"},"containerStyle")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"containerStyle")," optional prop is an object used to override the container style."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  containerStyle={{ backgroundColor: "red" }}\n/>\n')),(0,l.kt)("h3",{id:"inputwrapperstyle"},(0,l.kt)("inlineCode",{parentName:"h3"},"inputWrapperStyle")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"inputWrapperStyle")," optional prop is an object used to override the input wrapper style."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  inputWrapperStyle={{ backgroundColor: "red" }}\n/>\n')),(0,l.kt)("h3",{id:"rightaccessory-and-leftaccessory"},(0,l.kt)("inlineCode",{parentName:"h3"},"RightAccessory")," and ",(0,l.kt)("inlineCode",{parentName:"h3"},"LeftAccessory")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"RightAccessory")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"LeftAccessory")," optional props are components that are rendered on the right and left sides of the input, respectively. This is useful for rendering icons or buttons. The ",(0,l.kt)("a",{parentName:"p",href:"#status"},(0,l.kt)("inlineCode",{parentName:"a"},"status")),", ",(0,l.kt)("inlineCode",{parentName:"p"},"multiline")," from the ",(0,l.kt)("inlineCode",{parentName:"p"},"TextInputProps"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"editable")," (negation of ",(0,l.kt)("inlineCode",{parentName:"p"},"disabled")," status), and a default ",(0,l.kt)("inlineCode",{parentName:"p"},"style")," attribute are passed into it via props for custom usage."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  RightAccessory={(props) => (\n    // props has `multiline`, `status`, `disabled`, and `style` attributes\n    {disabled, status} = props\n\n    if (!!disabled) return <Icon icon="lock" color="gray" />\n    if (status === \'error\') return <Icon icon="x" color="red" />\n\n    return <Icon icon="check" color="green" />\n  )}\n/>\n')),(0,l.kt)("p",null,"It's also recommended to use ",(0,l.kt)("inlineCode",{parentName:"p"},"useMemo")," on accessories to prevent flickering, as without ",(0,l.kt)("inlineCode",{parentName:"p"},"useMemo")," they will rerender whenever the input value changes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'const PasswordRightAccessory = useMemo(\n  () =>\n    function PasswordRightAccessory(props: TextFieldAccessoryProps) {\n      return (\n        <Icon\n          icon={isAuthPasswordHidden ? "view" : "hidden"}\n          color={colors.palette.neutral800}\n          containerStyle={props.style}\n          onPress={() => setIsAuthPasswordHidden(!isAuthPasswordHidden)}\n        />\n      )\n    },\n  [isAuthPasswordHidden],\n)\n')),(0,l.kt)("p",null,"This could then be passed to the ",(0,l.kt)("inlineCode",{parentName:"p"},"TextField")," component directly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"<TextField\n  value={password}\n  onChangeText={(value) => setPassword(password)}\n  RightAccessory={PasswordRightAccessory}\n/>\n")))}c.isMDXComponent=!0}}]);