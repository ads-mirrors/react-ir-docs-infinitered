"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[8181],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={title:"Mobx State Tree"},i="reactotron-mst",s={unversionedId:"reactotron/plugins/mst",id:"reactotron/plugins/mst",title:"Mobx State Tree",description:"Behold! A plugin for Reactotron for working with mobx-state-tree.",source:"@site/docs/reactotron/plugins/mst.md",sourceDirName:"reactotron/plugins",slug:"/reactotron/plugins/mst",permalink:"/reactotron/plugins/mst",draft:!1,tags:[],version:"current",frontMatter:{title:"Mobx State Tree"},sidebar:"Reactotron",previous:{title:"Benchmarking",permalink:"/reactotron/plugins/benchmark"},next:{title:"Networking",permalink:"/reactotron/plugins/networking"}},l={},p=[{value:"filter",id:"filter",level:3},{value:"queryMode",id:"querymode",level:3},{value:"Phase 1",id:"phase-1",level:3},{value:"Single Tree",id:"single-tree",level:3},{value:"<code>flow()</code>-based actions issues",id:"flow-based-actions-issues",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reactotron-mst"},"reactotron-mst"),(0,r.kt)("p",null,"Behold! A plugin for Reactotron for working with mobx-state-tree."),(0,r.kt)("h1",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"This is a plugin for Reactotron, so you'll need either ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-react-native")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-react-dom")," installed first."),(0,r.kt)("p",null,"This is also a plugin for ",(0,r.kt)("inlineCode",{parentName:"p"},"mobx-state-tree"),", so you'll also need that installed as well."),(0,r.kt)("h1",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Add a dev-dependency to ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-mst")," to your app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add reactotron-mst --dev\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm i reactotron-mst --save-dev\n")),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"To make Reactotron aware of this plugin, go to the file you are configuring Reactotron currently and add this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// import the plugin\nimport { mst } from "reactotron-mst"\n\n// tell Reactotron to use this plugin\nReactotron.use(mst())\n')),(0,r.kt)("p",null,"This will bestow Reactotron the power to track ",(0,r.kt)("inlineCode",{parentName:"p"},"mobx-state-tree")," nodes."),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Finally, you need to give ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-mst")," your root tree node."),(0,r.kt)("p",null,"Here's an example of that in action:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// bring in Reactotron\nimport * as Reactotron from "reactotron-react-native"\n\n// bring in your mst model\nimport { MyModel } from "./my-model"\n\n// create an instance of your model\nconst myTree = MyModel.create()\n\n// let reactotron-mst know about it\nReactotron.trackMstNode(myTree)\n')),(0,r.kt)("h1",{id:"options"},"Options"),(0,r.kt)("p",null,"When you ",(0,r.kt)("inlineCode",{parentName:"p"},"use()")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-mst"),", you can also pass options."),(0,r.kt)("h3",{id:"filter"},"filter"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," property provides a way to control what is sent to Reactotron. It is a function which takes an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mobxjs/mobx-state-tree/blob/master/docs/middleware.md#call-attributes"},(0,r.kt)("inlineCode",{parentName:"a"},"IMiddlewareEvent"))," and returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),". If you return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the message will be sent to the Reactotron app. ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," will ignore this message."),(0,r.kt)("p",null,"Here's an example which will stop all ",(0,r.kt)("inlineCode",{parentName:"p"},"postProcessSnapshot"),"-based actions from jumping the wire."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import Tron from "reactotron-react-native"\nimport { mst } from "reactotron-mst"\n\nconst RX = /postProcessSnapshot/\nconst filter = (event) => RX.test(event.name) === false\n\nTron.use(mst({ filter }))\n')),(0,r.kt)("p",null,"The default value for ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," if you don't provide it is ",(0,r.kt)("inlineCode",{parentName:"p"},"() => true"),", which means everything gets passed to Reactotron."),(0,r.kt)("h3",{id:"querymode"},"queryMode"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"queryMode")," property provides a way to switch between subscribing to live state or snapshots. The only time you'll want to subscribe to snapshots instead of live state is when verifying transitory state (via ",(0,r.kt)("inlineCode",{parentName:"p"},"postProcessSnapshot"),") is not persisted."),(0,r.kt)("h1",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"trackMstNode()")," function will only be available after you setup the ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-mst")," plugin. Make sure you do the previous setup step first or you'll see an error that says, ",(0,r.kt)("inlineCode",{parentName:"p"},"trackMstNode is not a function"),"."),(0,r.kt)("h1",{id:"caveats"},"Caveats"),(0,r.kt)("h3",{id:"phase-1"},"Phase 1"),(0,r.kt)("p",null,"This plugin hooks into Reactotron just like the ",(0,r.kt)("inlineCode",{parentName:"p"},"redux")," one. So the basics are in place, but it'll be a much nicer experience once we start introducing some custom views specifically for ",(0,r.kt)("inlineCode",{parentName:"p"},"mobx-state-tree"),". Consider this plugin's status: phase 1 right now. \ud83d\ude05"),(0,r.kt)("h3",{id:"single-tree"},"Single Tree"),(0,r.kt)("p",null,"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"redux"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mobx-state-tree")," doesn't have to have a single root node. I personally find it easier to set it up like this, though."),(0,r.kt)("p",null,"Currently, ",(0,r.kt)("inlineCode",{parentName:"p"},"reactotron-mst")," only supports tracking 1 tree. Multi-tree support is planned, but requires a bit of retooling of the Reactotron app to support multiple states."),(0,r.kt)("p",null,"As a short-term hack, we might be able to find a way to do this by using a prefix to identify which tree you intend to work with. For example, if you would like to subscribe to a piece of state in a different tree, perhaps we could do something like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"$tree3.currentUser.password"),"."),(0,r.kt)("h3",{id:"flow-based-actions-issues"},(0,r.kt)("inlineCode",{parentName:"h3"},"flow()"),"-based actions issues"),(0,r.kt)("p",null,"Synchronous actions work well, however there's some issues with async actions when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"mobx-state-tree")," ",(0,r.kt)("inlineCode",{parentName:"p"},"flow()")," function. We're going to have to introduce a new UI view similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"redux-saga")," to display this. In the meantime, the action which kicks off the flow will be logged immediate and the return value will be untracked (for now... sorry!)."))}d.isMDXComponent=!0}}]);