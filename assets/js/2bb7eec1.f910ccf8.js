"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[5300],{3316:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gluegun/runtime","title":"Runtime","description":"Gluegun provides a builder that lets you initialize and configure Gluegun to work with your CLI. It lets you load & execute commands, extensions, and plugins.","source":"@site/docs/gluegun/runtime.md","sourceDirName":"gluegun","slug":"/gluegun/runtime","permalink":"/gluegun/runtime","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":300,"frontMatter":{"sidebar_position":300},"sidebar":"Gluegun","previous":{"title":"Getting Started","permalink":"/gluegun/getting-started"},"next":{"title":"Inside the Gluegun Toolbox","permalink":"/gluegun/toolbox-api/"}}');var s=i(4848),l=i(8453);const r={sidebar_position:300},t="Runtime",c={},d=[{value:"build",id:"build",level:2},{value:"src",id:"src",level:2},{value:"plugin",id:"plugin",level:2},{value:"plugins",id:"plugins",level:2},{value:"help",id:"help",level:2},{value:"version",id:"version",level:2},{value:"defaultCommand",id:"defaultcommand",level:2},{value:"command",id:"command",level:2},{value:"exclude",id:"exclude",level:2},{value:"checkForUpdates",id:"checkforupdates",level:2},{value:"create",id:"create",level:2},{value:"run",id:"run",level:2},{value:"configuration",id:"configuration",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"runtime",children:"Runtime"})}),"\n",(0,s.jsx)(n.p,{children:"Gluegun provides a builder that lets you initialize and configure Gluegun to work with your CLI. It lets you load & execute commands, extensions, and plugins."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note: Check out the ",(0,s.jsx)(n.a,{href:"../sniff",children:"sniff"})," module for detecting if your environment is able to run."]})}),"\n",(0,s.jsx)(n.p,{children:"Here's a kitchen sink version, which we're about to cover."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { build } = 'gluegun'\n\nconst cli = build('movie')\n  .src(__dirname)\n  .plugin('~/.movie/movie-imdb')\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: (toolbox) => toolbox.print.info('hi!') })\n  .exclude(['filesystem', 'semver', 'system', 'prompt', 'http'])\n  .checkForUpdates(5) // check for updates randomly about 5% of the time\n  .create()\n\nawait cli.run()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"build",children:"build"}),"\n",(0,s.jsxs)(n.p,{children:["Grab the ",(0,s.jsx)(n.code,{children:"build"})," function from ",(0,s.jsx)(n.code,{children:"gluegun"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { build } = require('gluegun')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now let's build a ",(0,s.jsx)(n.code,{children:"gluegun"})," cli environment by configuring various features."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('mycli')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"mycli"})," brand that you pass into ",(0,s.jsx)(n.code,{children:"build"})," is used through-out gluegun for things like configuration file names and folder names for plugins. You can also set it later, like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build().brand('movie')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Out of the box, this CLI does very little. And by very little I mean nothing. So let's configure this. We'll be chaining the ",(0,s.jsx)(n.code,{children:"build()"})," function from here."]}),"\n",(0,s.jsx)(n.h2,{id:"src",children:"src"}),"\n",(0,s.jsxs)(n.p,{children:["This sets where the default commands and extensions are located, in\n",(0,s.jsx)(n.code,{children:"commands"})," and ",(0,s.jsx)(n.code,{children:"extensions"})," folders, respectively."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie').src(__dirname)\n"})}),"\n",(0,s.jsx)(n.p,{children:"When you run a command, it'll first load extensions in this folder and then check the commands in this folder for the right command."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'# run a command with arguments\n$ movie actors Kingpin\n\n# run a command with arguments & options\n$ movie producers "Planes, Trains, & Automobiles" --sort age\n'})}),"\n",(0,s.jsx)(n.h2,{id:"plugin",children:"plugin"}),"\n",(0,s.jsxs)(n.p,{children:["Additional functionality can be added to the ",(0,s.jsx)(n.code,{children:"gluegun"})," object with ",(0,s.jsx)(n.a,{href:"../plugins",children:"plugins"}),". Plugins can be yours or your users."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Hint: ",(0,s.jsx)(n.code,{children:"src"})," and ",(0,s.jsx)(n.code,{children:"plugin"})," are almost identical under the hood. The only thing they do differently is ",(0,s.jsx)(n.code,{children:"src"}),' will be loaded first and be the "default plugin".']})}),"\n",(0,s.jsx)(n.p,{children:"A plugin is a folder (or, more often, an NPM package) that contains a structure - something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"movie-credits\n  commands\n    actors.js\n    producers.js\n  extensions\n    retrieve-imdb.js\n  templates\n    actor-view.js.ejs\n  movie.config.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can load a plugin from a directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie').src(__dirname).plugin('~/.movie/movie-imdb')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"plugins",children:"plugins"}),"\n",(0,s.jsx)(n.p,{children:"You can also load multiple plugins within a directory."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie').src(__dirname).plugin('~/.movie/movie-imdb').plugins('./node_modules', { pattern: 'movie-' })\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"plugins"})," supports a ",(0,s.jsx)(n.code,{children:"fs-jetpack"})," ",(0,s.jsx)(n.a,{href:"https://github.com/szwacz/fs-jetpack#findpath-searchoptions",children:"matching pattern"})," so you can filter out a subset of directories instead of just all."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  .plugins('./node_modules', { matching: 'movies-*' })\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you would like to keep plugins hidden and not available at the command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  .plugins('./node_modules', { matching: 'movies-*', hidden: true })\n"})}),"\n",(0,s.jsx)(n.p,{children:"When plugins are hidden they can still be run directly from the cli."}),"\n",(0,s.jsx)(n.h2,{id:"help",children:"help"}),"\n",(0,s.jsxs)(n.p,{children:["Gluegun ships with a somewhat adequate ",(0,s.jsx)(n.code,{children:"help"})," screen out of the box. Add it to your\nCLI easily by calling ",(0,s.jsx)(n.code,{children:".help()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also pass in a function or command object here:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"  .help(toolbox => toolbox.print.info('No help for you!'))\n  .help({\n    name: 'help',\n    alias: 'helpmeplease',\n    hidden: true,\n    dashed: true,\n    run: toolbox => toolbox.print.info('No help for you!')\n  })\n"})}),"\n",(0,s.jsx)(n.h2,{id:"version",children:"version"}),"\n",(0,s.jsxs)(n.p,{children:["You usually like to be able to run ",(0,s.jsx)(n.code,{children:"--version"})," to see your CLI's version from the command\nline, so add it easily with ",(0,s.jsx)(n.code,{children:".version()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Just like ",(0,s.jsx)(n.code,{children:"help"})," above, you can pass in a function or command object to configure it further."]}),"\n",(0,s.jsx)(n.h2,{id:"defaultcommand",children:"defaultCommand"}),"\n",(0,s.jsxs)(n.p,{children:["If the user runs your CLI and doesn't supply any matching parameters, it'll run this command\ninstead. Note that you can do this by supplying a ",(0,s.jsx)(n.code,{children:"<brand>.js"})," file in your ",(0,s.jsx)(n.code,{children:"./commands"}),"\nfolder as well."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Just like ",(0,s.jsx)(n.code,{children:"help"})," and ",(0,s.jsx)(n.code,{children:"version"})," above, you can pass in a function or command object if\nyou prefer more control."]}),"\n",(0,s.jsx)(n.h2,{id:"command",children:"command"}),"\n",(0,s.jsxs)(n.p,{children:["If you want to pass in commands directly to the runtime builder, you can do that with ",(0,s.jsx)(n.code,{children:".command()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: (toolbox) => toolbox.print.info('hi!') })\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this case, if you ran ",(0,s.jsx)(n.code,{children:"movie hi"}),", it would run the function provided and print out 'hi!'."]}),"\n",(0,s.jsxs)(n.p,{children:["You must provide an object with at least a ",(0,s.jsx)(n.code,{children:"name"})," and a ",(0,s.jsx)(n.code,{children:"run"})," function, which can be\n",(0,s.jsx)(n.code,{children:"async"})," or regular."]}),"\n",(0,s.jsx)(n.h2,{id:"exclude",children:"exclude"}),"\n",(0,s.jsxs)(n.p,{children:["If you don't need certain core extensions, you can skip loading them (thus improving startup time) by using ",(0,s.jsx)(n.code,{children:".exclude()"}),". Just pass in an array of string names for the core extensions you don't need."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie').exclude([\n  'meta',\n  'strings',\n  'print',\n  'filesystem',\n  'semver',\n  'system',\n  'prompt',\n  'http',\n  'template',\n  'patching',\n])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you find you need one of these extensions for just ",(0,s.jsx)(n.em,{children:"one"})," command but don't want to load it for ",(0,s.jsx)(n.em,{children:"all"})," of your commands, you can always load it separately from the Gluegun toolbox, like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { prompt } = require('gluegun')\n// or\nconst { prompt } = require('gluegun/prompt')\n"})}),"\n",(0,s.jsx)(n.p,{children:"For reference, the core extensions that incur the biggest startup performance penalty are (timing varies per machine, but this gives some sense of scale):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"prompt +100ms\nprint +45ms\nhttp +30ms\nsystem +10ms\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.em,{children:["Note about TypeScript and ",(0,s.jsx)(n.code,{children:"exclude"}),":"]})," Please note that the TypeScript type ",(0,s.jsx)(n.code,{children:"GluegunToolbox"})," (as of Gluegun 2.1.x) always assumes that core extensions are included, even if you excluded them in the builder. In this case, it's recommended that you create your own ",(0,s.jsx)(n.code,{children:"FooToolbox"})," (or similar) and update the interface to match your preferred configuration. Example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// wherever your types are, say, `./src/types.ts`\nimport { GluegunToolbox } from 'gluegun'\nexport interface FooToolbox extends GluegunToolbox {\n  prompt: null\n  print: null\n  http: null\n  system: null\n}\n\n// in a command\nimport { FooToolbox } from '../types'\nmodule.exports = {\n  run: async (toolbox: FooToolbox) => {\n    // ... use toolbox with your excluded extensions\n  },\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"checkforupdates",children:"checkForUpdates"}),"\n",(0,s.jsx)(n.p,{children:"This allows you to check for updates every so often. Because we don't track how often your CLI is run, instead, we allow you to set a percentage chance of checking for updates. We recommend somewhere between 1-20, depending on how often your CLI is run. If you want to run it every time, set it to 100."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: (toolbox) => toolbox.print.info('hi!') })\n  .checkForUpdates(5)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"create",children:"create"}),"\n",(0,s.jsxs)(n.p,{children:["At this point, we've been configuring our CLI. When we're ready, we call ",(0,s.jsx)(n.code,{children:"create()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const cli = build('movie')\n  .src(__dirname)\n  .plugins('./node_modules', { pattern: 'movie-' })\n  .plugin('~/.movie/movie-imdb')\n  .help()\n  .version()\n  .defaultCommand()\n  .command({ name: 'hi', run: (toolbox) => toolbox.print.info('hi!') })\n  .checkForUpdates(5)\n  .create()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This command applies the configuration that you were just chaining, and turns it into a ",(0,s.jsx)(n.code,{children:"runtime cli"})," which supports calling ",(0,s.jsx)(n.code,{children:"run()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"And now we're ready to run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"cli.run()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With no parameters, ",(0,s.jsx)(n.code,{children:"gluegun"})," will parse the command line arguments looking for the command to run."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'# list the plugins\n$ movie\n\n# run a command\n$ movie quote\n\n# run a command with options\n$ movie quote --funny\n\n# run a command with arguments\n$ movie actors Kingpin\n\n# run a command with arguments & options\n$ movie producers "Planes, Trains, & Automobiles" --sort age\n'})}),"\n",(0,s.jsx)(n.h2,{id:"run",children:"run"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gluegun"})," can also be ",(0,s.jsx)(n.code,{children:"run()"})," with options."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"await cli.run('quote random \"*johnny\"', {\n  funny: true,\n  genre: 'Horror',\n  weapon: 'axe',\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"There's a few situations that make this useful."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Maybe you like to use ",(0,s.jsx)(n.code,{children:"meow"})," or ",(0,s.jsx)(n.code,{children:"commander"})," to parse the command line."]}),"\n",(0,s.jsx)(n.li,{children:"Maybe your interface isn't a CLI."}),"\n",(0,s.jsx)(n.li,{children:"Maybe you want to run several commands in a row."}),"\n",(0,s.jsx)(n.li,{children:"Maybe this is your program and you don't like strangers telling you how to code."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Bottom line is, you get to pick. It's yours. ",(0,s.jsx)(n.code,{children:"gluegun"})," is just glue."]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Each plugin can have its own configuration file where it places defaults. These defaults can then be overridden by reading defaults from a configuration file or entry in ",(0,s.jsx)(n.code,{children:"package.json"}),". We use ",(0,s.jsx)(n.a,{href:"https://github.com/davidtheclark/cosmiconfig",children:"cosmiconfig"})," for this."]}),"\n",(0,s.jsxs)(n.p,{children:["It will read the plugin name from the ",(0,s.jsx)(n.code,{children:"name"})," key and the defaults will be read from the ",(0,s.jsx)(n.code,{children:"defaults"})," section. Each section underneath ",(0,s.jsx)(n.code,{children:"default"})," can be used to override the sections of the plugin. Since that was horribly explained, here's an example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// in movies.config.js\nmodule.exports = {\n  name: 'movies',\n  defaults: {\n    movie: {\n      cache: '~/.movies/cache',\n    },\n    another: {\n      count: 100,\n    },\n  },\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var o=i(6540);const s={},l=o.createContext(s);function r(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);