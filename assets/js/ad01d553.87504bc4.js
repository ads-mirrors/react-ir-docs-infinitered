"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[7876],{1536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ignite-cli/concept/Generator-Templates","title":"Generator Templates","description":"Generator templates are written in ejs, which is a templating language using JavaScript.","source":"@site/docs/ignite-cli/concept/Generator-Templates.md","sourceDirName":"ignite-cli/concept","slug":"/ignite-cli/concept/Generator-Templates","permalink":"/ignite-cli/concept/Generator-Templates","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":111,"frontMatter":{"sidebar_position":111},"sidebar":"Ignite","previous":{"title":"Generators","permalink":"/ignite-cli/concept/Generators"},"next":{"title":"TypeScript","permalink":"/ignite-cli/concept/TypeScript"}}');var s=t(4848),a=t(8453);const r={sidebar_position:111},o="Generator Templates",l={},c=[{value:"Folder naming conventions",id:"folder-naming-conventions",level:2},{value:"File naming conventions",id:"file-naming-conventions",level:2},{value:"Props",id:"props",level:2},{value:"Front Matter",id:"front-matter",level:2},{value:"destinationDir",id:"destinationdir",level:3},{value:"patch",id:"patch",level:3},{value:"Notes",id:"notes",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"generator-templates",children:"Generator Templates"})}),"\n",(0,s.jsxs)(n.p,{children:["Generator templates are written in ",(0,s.jsx)(n.a,{href:"https://ejs.co/",children:"ejs"}),", which is a templating language using JavaScript."]}),"\n",(0,s.jsxs)(n.p,{children:["You write the template however you want, and use ",(0,s.jsx)(n.code,{children:"<%= foo %>"})," to run and output JavaScript."]}),"\n",(0,s.jsxs)(n.p,{children:['You can also use control statements like "if" with ',(0,s.jsx)(n.code,{children:"<% if (condition) { %>Stuff here<% } %>"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"folder-naming-conventions",children:"Folder naming conventions"}),"\n",(0,s.jsxs)(n.p,{children:["Templates are located in your app's ",(0,s.jsx)(n.code,{children:"./ignite/templates"})," folder, and the name of the folder should match the name of the generator."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if you want to run ",(0,s.jsx)(n.code,{children:"npx ignite-cli generate header Pizza"}),", you'd put the header templates in the ",(0,s.jsx)(n.code,{children:"./ignite/templates/header/"})," folder."]}),"\n",(0,s.jsxs)(n.p,{children:["Any files in that folder will be copied over & run through the generator with the ",(0,s.jsx)(n.code,{children:"Pizza"})," name applied."]}),"\n",(0,s.jsx)(n.h2,{id:"file-naming-conventions",children:"File naming conventions"}),"\n",(0,s.jsxs)(n.p,{children:["If you use all upper-case ",(0,s.jsx)(n.code,{children:"NAME"})," in your template filenames, that will be replaced by a pascal-case version of the name provided by the person running the generator."]}),"\n",(0,s.jsx)(n.p,{children:"It's best to just look at an example:"}),"\n",(0,s.jsxs)(n.p,{children:["Let's say you have a file called ",(0,s.jsx)(n.code,{children:"NAMEScreen.ts"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If they run ",(0,s.jsx)(n.code,{children:"npx ignite-cli generate screen Pizza"}),", it'll name the file ",(0,s.jsx)(n.code,{children:"PizzaScreen.ts"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"If you'd like to customize the filename you can provide a filename option in the front matter of the template like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"---\nfilename: <%= props.camelCaseName %>.tsx\n---\n"})}),"\n",(0,s.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(n.p,{children:["There's a provided ",(0,s.jsx)(n.code,{children:"props"})," object that contains the following properties:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'props.filename       // string, the name of the file being generated (e.g. "UserModel.tsx")\nprops.pascalCaseName // string, PascalCase version of the name that is passed in (e.g. "UserModel")\nprops.camelCaseName  // string, camelCase version of the name (e.g. "userModel")\nprops.kebabCaseName  // string, kebab-case version of the name (e.g. "user-model")\nprops.subdirectory   // string, the subdirectory path to the file being generated (e.g. "my/sub/path/")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Example of using these in a template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ejs",children:"type <%= props.pascalCaseName %>Props = { some: string }\nexport function <%= props.pascalCaseName %>(props: <%= props.pascalCaseName %>Props) {\n  return <Text>{props.some} in a <%= props.pascalCaseName %> component!</Text>\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"front-matter",children:"Front Matter"}),"\n",(0,s.jsxs)(n.p,{children:['"Front matter" is a way to specify meta-data about a template in the template itself. It\'s stripped out of the generated file. You delineate front matter by three dashes (',(0,s.jsx)(n.code,{children:"---"}),") above and below, and it has to be the very first thing in the template. The following front matter options are available:"]}),"\n",(0,s.jsx)(n.h3,{id:"destinationdir",children:"destinationDir"}),"\n",(0,s.jsxs)(n.p,{children:["We use this in Ignite to customize the destination of a given template. For example, in ",(0,s.jsx)(n.code,{children:"./ignite/templates/navigator/*"})," we could have:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'---\ndestinationDir: app/navigation\n---\nimport { StackNavigator } from "react-navigation"\n\n// ...\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This would copy files to ",(0,s.jsx)(n.code,{children:"./app/navigation/*"})," instead of the default ",(0,s.jsx)(n.code,{children:"./app/navigators/*"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"patch",children:"patch"}),"\n",(0,s.jsx)(n.p,{children:"This lets you patch another file, such as an index file. Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'---\npatch:\n  path: "app/screens/index.ts"\n  append: "export * from \\"./<%= props.kebabCaseName %>/<%= props.kebabCaseName %>-screen\\"\\n"\n---\n'})}),"\n",(0,s.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.p,{children:["Front matter is very powerful, but not necessarily super intuitive. If you have questions about it, ask in the ",(0,s.jsx)(n.a,{href:"https://community.infinite.red",children:"Ignite Slack community"})," or post a ",(0,s.jsx)(n.a,{href:"https://github.com/infinitered/ignite/discussions",children:"Discussion"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);