"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[4035],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?o.createElement(h,r(r({ref:t},s),{},{components:n})):o.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i={sidebar_position:35},r="Icon",l={unversionedId:"ignite-cli/boilerplate/app/components/Icon",id:"ignite-cli/boilerplate/app/components/Icon",title:"Icon",description:"Ignite's Icon Component renders an icon using predefined icon images. You can use those, override them, or customize this component to create any number of image based icons. If onPress is passed, it will wrap the icon in a TouchableOpacity component, otherwise it will use a View component.",source:"@site/docs/ignite-cli/boilerplate/app/components/Icon.md",sourceDirName:"ignite-cli/boilerplate/app/components",slug:"/ignite-cli/boilerplate/app/components/Icon",permalink:"/ignite-cli/boilerplate/app/components/Icon",draft:!1,tags:[],version:"current",sidebarPosition:35,frontMatter:{sidebar_position:35},sidebar:"Ignite",previous:{title:"Header",permalink:"/ignite-cli/boilerplate/app/components/Header"},next:{title:"ListItem",permalink:"/ignite-cli/boilerplate/app/components/ListItem"}},p={},c=[{value:"Props",id:"props",level:2},{value:"<code>icon</code>",id:"icon-1",level:3},{value:"<code>color</code>",id:"color",level:3},{value:"<code>size</code>",id:"size",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>containerStyle</code>",id:"containerstyle",level:3},{value:"<code>onPress</code>",id:"onpress",level:3},{value:"Custom Icons",id:"custom-icons",level:2}],s={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"icon"},"Icon"),(0,a.kt)("p",null,"Ignite's ",(0,a.kt)("inlineCode",{parentName:"p"},"Icon")," Component renders an icon using predefined icon images. You can use those, override them, or customize this component to create any number of image based icons. If ",(0,a.kt)("inlineCode",{parentName:"p"},"onPress")," is passed, it will wrap the icon in a ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/touchableopacity"},(0,a.kt)("inlineCode",{parentName:"a"},"TouchableOpacity"))," component, otherwise it will use a ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/view"},(0,a.kt)("inlineCode",{parentName:"a"},"View"))," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="ladybug" onPress={() => Alert.alert("Hello")} />\n')),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("p",null,"Other than these props, you can pass any props that ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchableOpacity")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," support and they will be forwarded to the respective wrapper component."),(0,a.kt)("h3",{id:"icon-1"},(0,a.kt)("inlineCode",{parentName:"h3"},"icon")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"icon")," prop is required. This is the string name of the icon to be rendered. The options are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"back"),(0,a.kt)("li",{parentName:"ul"},"bell"),(0,a.kt)("li",{parentName:"ul"},"caretLeft"),(0,a.kt)("li",{parentName:"ul"},"caretRight"),(0,a.kt)("li",{parentName:"ul"},"check"),(0,a.kt)("li",{parentName:"ul"},"community"),(0,a.kt)("li",{parentName:"ul"},"components"),(0,a.kt)("li",{parentName:"ul"},"debug"),(0,a.kt)("li",{parentName:"ul"},"heart"),(0,a.kt)("li",{parentName:"ul"},"hidden"),(0,a.kt)("li",{parentName:"ul"},"ladybug"),(0,a.kt)("li",{parentName:"ul"},"lock"),(0,a.kt)("li",{parentName:"ul"},"menu"),(0,a.kt)("li",{parentName:"ul"},"more"),(0,a.kt)("li",{parentName:"ul"},"pin"),(0,a.kt)("li",{parentName:"ul"},"settings"),(0,a.kt)("li",{parentName:"ul"},"view"),(0,a.kt)("li",{parentName:"ul"},"x")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="bell" />\n')),(0,a.kt)("p",null,"You can easily change or add ",(0,a.kt)("a",{parentName:"p",href:"#custom-icons"},"custom icons")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Icon")," component."),(0,a.kt)("h3",{id:"color"},(0,a.kt)("inlineCode",{parentName:"h3"},"color")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"color")," optional prop is a string that will be used to set the ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/image-style-props#tintcolor"},(0,a.kt)("inlineCode",{parentName:"a"},"tintColor"))," of the icon image."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="x" color="#7C7C7C">\n')),(0,a.kt)("h3",{id:"size"},(0,a.kt)("inlineCode",{parentName:"h3"},"size")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," optional prop is a number that is used to set the dimensions of the icon image."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="x" size={24} />\n')),(0,a.kt)("h3",{id:"style"},(0,a.kt)("inlineCode",{parentName:"h3"},"style")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"style")," prop is optional. This is an object that overrides the default style of the icon, and is of the type ",(0,a.kt)("inlineCode",{parentName:"p"},"StyleProp<ImageStyle>"),". By default this just sets the image's ",(0,a.kt)("inlineCode",{parentName:"p"},"resizeMode")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"contain"),". See React Native docs on ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/image#style"},"ImageStyle")," for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="ladybug" style={{ width: 20, height: 20 }} />\n')),(0,a.kt)("h3",{id:"containerstyle"},(0,a.kt)("inlineCode",{parentName:"h3"},"containerStyle")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"containerStyle")," is an optional prop that sets the style of the icon container, and is of the type ",(0,a.kt)("inlineCode",{parentName:"p"},"StyleProp<ViewStyle>"),". See React Native docs on ",(0,a.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/view-style-props"},"ViewStyle")," for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="bug" containerStyle={{ backgroundColor: "red" }} />\n')),(0,a.kt)("h3",{id:"onpress"},(0,a.kt)("inlineCode",{parentName:"h3"},"onPress")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onPress")," optional prop is a function that will be called when the icon is pressed. Note that when this prop is passed, the icon will be wrapped in a ",(0,a.kt)("inlineCode",{parentName:"p"},"TouchableOpacity")," component rather than a ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="ladybug" onPress={() => Alert.alert("Hello")} />\n')),(0,a.kt)("h2",{id:"custom-icons"},"Custom Icons"),(0,a.kt)("p",null,"To create your own custom icon, add your icon image(s) to the ",(0,a.kt)("inlineCode",{parentName:"p"},"assets/icons/")," directory and then add it with its own name to the ",(0,a.kt)("inlineCode",{parentName:"p"},"iconRegistry")," object in ",(0,a.kt)("inlineCode",{parentName:"p"},"app/components/Icon.tsx"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-- icon/\n  -- icons/\n    -- index.ts\n    -- my-custom-icon.png\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'export const iconRegistry = {\n  // ...\n  custom: require("./myCustomIcon.png"),\n}\n')),(0,a.kt)("p",null,"You can then use your custom icon by passing its name through the ",(0,a.kt)("inlineCode",{parentName:"p"},"icon")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="custom" />\n')))}u.isMDXComponent=!0}}]);