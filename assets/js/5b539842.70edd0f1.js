"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[9619],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Releasing",l={unversionedId:"reactotron/contributing/releasing",id:"reactotron/contributing/releasing",title:"Releasing",description:"Note: this is a document primarily intended for maintainers at Infinite Red.",source:"@site/docs/reactotron/contributing/releasing.md",sourceDirName:"reactotron/contributing",slug:"/reactotron/contributing/releasing",permalink:"/reactotron/contributing/releasing",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"Reactotron",previous:{title:"Monorepo Structure",permalink:"/reactotron/contributing/monorepo"}},s={},p=[{value:"High Level Overview",id:"high-level-overview",level:2},{value:"Git Tags",id:"git-tags",level:3},{value:"Release Branches",id:"release-branches",level:3},{value:"Releasing Artifacts",id:"releasing-artifacts",level:3},{value:"How Releases Are Implemented",id:"how-releases-are-implemented",level:2},{value:"Nx",id:"nx",level:2},{value:"<code>jscutlery/semver</code>",id:"jscutlerysemver",level:2},{value:"CircleCi",id:"circleci",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"releasing"},"Releasing"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: this is a document primarily intended for maintainers at Infinite Red.")),(0,a.kt)("h2",{id:"high-level-overview"},"High Level Overview"),(0,a.kt)("h3",{id:"git-tags"},"Git Tags"),(0,a.kt)("p",null,"Git tags are used to mark a commit for a release. The format of the git tag is ",(0,a.kt)("inlineCode",{parentName:"p"},"<workspace>@<version>")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"reactotron-app@3.0.0"),")."),(0,a.kt)("p",null,"A release commit and a git tag is created for every affected workspace on a release branch: ",(0,a.kt)("inlineCode",{parentName:"p"},"master"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"beta"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"alpha"),"."),(0,a.kt)("p",null,"Versions for a workspace are determined by the version in the workspace ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "reactotron-app",\n  "version": "3.0.0"\n}\n')),(0,a.kt)("p",null,"Would correspond to a git tag ",(0,a.kt)("inlineCode",{parentName:"p"},"reactotron-app@3.0.0"),"."),(0,a.kt)("h3",{id:"release-branches"},"Release Branches"),(0,a.kt)("p",null,"In CI, on every commit to a release branch, a task is run to determine what changed between the current commit and the last commit. If a workspace has changed, then a new release commit and tag will be added to the release branch."),(0,a.kt)("p",null,"So if 3 workspaces change, then 3 release commits are added to the release branch and 3 git tags are created."),(0,a.kt)("h3",{id:"releasing-artifacts"},"Releasing Artifacts"),(0,a.kt)("p",null,"When a new git tag is published, CI will build and publish the workspace artifacts for that tag."),(0,a.kt)("p",null,"As of writing this, we have two workspaces: ",(0,a.kt)("inlineCode",{parentName:"p"},"apps")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"lib"),"."),(0,a.kt)("p",null,"Artifacts from ",(0,a.kt)("inlineCode",{parentName:"p"},"lib")," workspaces are published to npm."),(0,a.kt)("p",null,"Artifacts from ",(0,a.kt)("inlineCode",{parentName:"p"},"app")," workspaces are published to GitHub releases."),(0,a.kt)("h2",{id:"how-releases-are-implemented"},"How Releases Are Implemented"),(0,a.kt)("p",null,"Releases are implemented using:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://nx.dev/getting-started/intro"},"nx")," to manage workspaces and determine which workspaces have changed between commits"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/jscutlery/semver"},"jscutlery/semver")," to bump package.json versions, create release commits, and create git tags"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://circleci.com/docs/configuration-reference/"},"CircleCi")," to run the release tasks")),(0,a.kt)("h2",{id:"nx"},"Nx"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nx")," has this concept of ",(0,a.kt)("a",{parentName:"p",href:"https://nx.dev/core-features/run-tasks#run-tasks"},"tasks"),", which are like npm scripts defined in a ",(0,a.kt)("inlineCode",{parentName:"p"},"project.json")," file."),(0,a.kt)("p",null,"To be consistent in the ",(0,a.kt)("inlineCode",{parentName:"p"},"jscutlery/semver")," docs, we have defined semantic release target task in the ",(0,a.kt)("inlineCode",{parentName:"p"},"projects.json")," file as ",(0,a.kt)("inlineCode",{parentName:"p"},"version"),"."),(0,a.kt)("p",null,"This can be run with ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nx run <project>:version")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nx run app:version"),")."),(0,a.kt)("p",null,"However, normally this will be run using ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nx affected --target version --parallel=1 --base HEAD~1 --head HEAD"),". The ",(0,a.kt)("a",{parentName:"p",href:"https://nx.dev/concepts/affected"},"affected")," command from ",(0,a.kt)("inlineCode",{parentName:"p"},"nx")," will run the ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," task for the workspaces that have changed between the branches current commit and the last commit."),(0,a.kt)("h2",{id:"jscutlerysemver"},(0,a.kt)("inlineCode",{parentName:"h2"},"jscutlery/semver")),(0,a.kt)("p",null,"To determine the new version, ",(0,a.kt)("inlineCode",{parentName:"p"},"jscutlery/semver")," will look at the git tags on the repo, and look for an existing tag ",(0,a.kt)("inlineCode",{parentName:"p"},"<project>:<version>")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"app:1.0.0"),"). If it finds one, it will increment the version number based on the existing git tags."),(0,a.kt)("p",null,"Settings for this plugin are managed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"nx.json")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"project.json")," files in a workspace."),(0,a.kt)("h2",{id:"circleci"},"CircleCi"),(0,a.kt)("p",null,"CircleCi is used to run the release tasks. The ",(0,a.kt)("inlineCode",{parentName:"p"},"config.yml")," file is located in the ",(0,a.kt)("inlineCode",{parentName:"p"},".circleci")," folder."),(0,a.kt)("p",null,"CircleCi is configured to check for whether new release commits and tags are needed on every commit to a release branch: ",(0,a.kt)("inlineCode",{parentName:"p"},"master"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"beta"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"alpha"),"."),(0,a.kt)("p",null,"Once a new release tag is created, CircleCi will run a job to publish the artifacts for the workspace."))}m.isMDXComponent=!0}}]);