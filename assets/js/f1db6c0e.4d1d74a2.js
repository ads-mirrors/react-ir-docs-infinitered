"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[5026],{120:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ignite-cli/contributing/Contributing-To-Ignite","title":"Contributing to Ignite","description":"Documentation","source":"@site/docs/ignite-cli/contributing/Contributing-To-Ignite.md","sourceDirName":"ignite-cli/contributing","slug":"/ignite-cli/contributing/Contributing-To-Ignite","permalink":"/ignite-cli/contributing/Contributing-To-Ignite","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":150,"frontMatter":{"sidebar_position":150},"sidebar":"Ignite","previous":{"title":"Remove Demo Code","permalink":"/ignite-cli/cli/Remove-Demo-Code"},"next":{"title":"A Tour of the Ignite CLI Code Base","permalink":"/ignite-cli/contributing/Tour-of-Ignite"}}');var o=t(4848),r=t(8453);const s={sidebar_position:150},a="Contributing to Ignite",c={},l=[{value:"Documentation",id:"documentation",level:2},{value:"For contributors",id:"for-contributors",level:2},{value:"Testing changes from your local copy of Ignite",id:"testing-changes-from-your-local-copy-of-ignite",level:3},{value:"Making PRs",id:"making-prs",level:3},{value:"For maintainers",id:"for-maintainers",level:2},{value:"Merging PRs",id:"merging-prs",level:3},{value:"Managing future version branches",id:"managing-future-version-branches",level:3},{value:"Further reading",id:"further-reading",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"contributing-to-ignite",children:"Contributing to Ignite"})}),"\n",(0,o.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,o.jsxs)(n.p,{children:["We include a ",(0,o.jsx)(n.code,{children:"README.md"}),", ",(0,o.jsx)(n.code,{children:"LICENSE"}),", and ",(0,o.jsx)(n.code,{children:"CODE_OF_CONDUCT.md"})," in the root of the folder. You should read all three of them. The license is a standard MIT permissive license, and the code of conduct ensures that people are to treat each other with respect."]}),"\n",(0,o.jsx)(n.h2,{id:"for-contributors",children:"For contributors"}),"\n",(0,o.jsx)(n.h3,{id:"testing-changes-from-your-local-copy-of-ignite",children:"Testing changes from your local copy of Ignite"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to test changes to the Ignite CLI that you have in a local git repo, that haven't been published to NPM, you can run the ",(0,o.jsx)(n.code,{children:"bin/ignite"})," script via node."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"# Generate a new Ignite app from your local copy of the Ignite CLI\nnode your-ignite-repo-clone/bin/ignite new PizzaApp\n\n# Use a built-in generator from your local copy\nnode your-ignite-repo-clone/bin/ignite generate component OrderButton\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In addition, we have automated tests you can run with ",(0,o.jsx)(n.code,{children:"yarn test"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"making-prs",children:"Making PRs"}),"\n",(0,o.jsx)(n.p,{children:"We appreciate your contribution! To make it easier for us to review, please make sure to add a clear title and description that explains both what the change is, and why it's useful, if applicable."}),"\n",(0,o.jsx)(n.p,{children:"Maintainers may choose to rewrite this description for our changelog, or squash your commits when merging."}),"\n",(0,o.jsx)(n.h2,{id:"for-maintainers",children:"For maintainers"}),"\n",(0,o.jsx)(n.h3,{id:"merging-prs",children:"Merging PRs"}),"\n",(0,o.jsx)(n.p,{children:"When merging PRs, we need maintainers to make sure that there's appropriately formatted commit message(s) for semantic-release to document changes for the release notes and pick the next-released version for Ignite."}),"\n",(0,o.jsxs)(n.p,{children:["Make sure the merge commit is appropriately marked as a fix, feature, etc, and also maintain credit for the PR in release notes by keeping the default ",(0,o.jsx)(n.code,{children:"(#PRNUMBER by @gituser)"})," in the title. See ",(0,o.jsx)(n.a,{href:"/ignite-cli/contributing/Releasing-Ignite",children:"Releasing Ignite"})," for more info on how to format commit messages."]}),"\n",(0,o.jsx)(n.p,{children:"You have two choices when merging to Ignite:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Merge with a merge commit, keeping the original commits. In this case, if the original commits are using the semantic-release conventions, those messages will be used for the changelog and release determinations.","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"If everything in the PR is sufficiently documented by those commit messages, you don't need to add anything to the commit message."}),"\n",(0,o.jsx)(n.li,{children:"If there are no change entries, you should update the merge commit message when you merge to match the expected conventions."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Alternatively, if you don't want to keep the original commits, you can use a squash merge. You will need to update the merge commit message to match semantic-release conventions as required by the particular change."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Not every included commit in a PR needs to be formatted this way, only enough commits to ensure relevant changes have been documented."}),"\n",(0,o.jsxs)(n.p,{children:["In addition, if there's a feature branch for a future version of Ignite, you'll need to merge up ",(0,o.jsx)(n.code,{children:"master"})," into this feature branch. See the next section for instructions."]}),"\n",(0,o.jsx)(n.h3,{id:"managing-future-version-branches",children:"Managing future version branches"}),"\n",(0,o.jsxs)(n.p,{children:["When we're working on a new release of Ignite, we'll create a feature branch for work that's exclusive to that version (e.g., ",(0,o.jsx)(n.code,{children:"v10"}),")."]}),"\n",(0,o.jsxs)(n.p,{children:["If such a branch exists, whenever you merge a commit, you should also merge that change up from ",(0,o.jsx)(n.code,{children:"master"}),"->",(0,o.jsx)(n.code,{children:"next-version-branch"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To do so, update your local branches, check out ",(0,o.jsx)(n.code,{children:"next-version-branch"}),", and run ",(0,o.jsx)(n.code,{children:"git merge --no-ff origin/master"}),". You do not need to customize this merge commit message."]}),"\n",(0,o.jsxs)(n.p,{children:["It's a good idea to create a pull request for this merge-up if anyone else is working on Ignite along with you, so that they can be made aware of changes to ",(0,o.jsx)(n.code,{children:"next-version-branch"})," ASAP. It also us to ensure tests are run before you update the branch."]}),"\n",(0,o.jsx)(n.h2,{id:"further-reading",children:"Further reading"}),"\n",(0,o.jsxs)(n.p,{children:["Check out ",(0,o.jsx)(n.a,{href:"/ignite-cli/contributing/Tour-of-Ignite",children:"A Tour of the Ignite CLI Code Base"})," for more information about Ignite's structure and features."]}),"\n",(0,o.jsxs)(n.p,{children:["We also have a guide to ",(0,o.jsx)(n.a,{href:"/ignite-cli/contributing/Releasing-Ignite",children:"Releasing Ignite"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);