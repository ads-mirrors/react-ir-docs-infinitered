"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[8422],{8256:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reactotron/plugins/track-global-errors","title":"Global Errors","description":"The goal of this plugin is to ensure all errors are thrown over to Reactotron for display.","source":"@site/docs/reactotron/plugins/track-global-errors.md","sourceDirName":"reactotron/plugins","slug":"/reactotron/plugins/track-global-errors","permalink":"/reactotron/plugins/track-global-errors","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Global Errors"},"sidebar":"Reactotron","previous":{"title":"Storybook","permalink":"/reactotron/plugins/storybook"},"next":{"title":"Global Logs","permalink":"/reactotron/plugins/track-global-logs"}}');var n=t(4848),s=t(8453);const a={title:"Global Errors"},i="Track Global Errors",c={},l=[{value:"Options",id:"options",level:2},{value:"React JS Source Maps",id:"react-js-source-maps",level:3},{value:"React JS",id:"react-js",level:3},{value:"React Native",id:"react-native",level:3}];function d(e){const o={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"track-global-errors",children:"Track Global Errors"})}),"\n",(0,n.jsxs)(o.p,{children:["The goal of this plugin is to ensure all errors are thrown over to Reactotron for display.\nBoth ",(0,n.jsx)(o.code,{children:"reactotron-react-native"})," and ",(0,n.jsx)(o.code,{children:"reactotron-react-js"})," ship with this plugin."]}),"\n",(0,n.jsx)(o.h1,{id:"usage",children:"Usage"}),"\n",(0,n.jsxs)(o.p,{children:["To use the ",(0,n.jsx)(o.code,{children:"trackGlobalErrors"})," plugin, add the additional plugin on the ",(0,n.jsx)(o.code,{children:"import"})," line."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-js",children:'import Reactotron, { trackGlobalErrors } from "reactotron-react-native";\n'})}),"\n",(0,n.jsx)(o.p,{children:"or"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-js",children:'import Reactotron, { trackGlobalErrors } from "reactotron-react-js";\n'})}),"\n",(0,n.jsx)(o.p,{children:"Next, add it as a plugin to Reactotron."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-js",children:"Reactotron.configure()\n  .use(trackGlobalErrors()) // <--- here we go!\n  .connect();\n"})}),"\n",(0,n.jsx)(o.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(o.p,{children:"Veto is function that allows you to select frames you would like to leave out of the stack trace."}),"\n",(0,n.jsx)(o.p,{children:"For example, on React Native, you'd like to leave off any frames sourced from React Native itself"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-js",children:'Reactotron.configure()\n  .use(\n    trackGlobalErrors({\n      veto: (frame) =>\n        !frame.fileName.includes("/node_modules/react-native/"),\n    })\n  )\n  .connect();\n'})}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"veto"})," is a function that takes an ",(0,n.jsx)(o.code,{children:"object"})," and returns a ",(0,n.jsx)(o.code,{children:"boolean"}),". ",(0,n.jsx)(o.code,{children:"true"})," = keep it. ",(0,n.jsx)(o.code,{children:"false"})," = ditch it."]}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.strong,{children:"Note:"}),' This behavior is inverted from the originally intended design. The function was meant to work as "true = ditch it, false = keep it", but due to a long-standing implementation detail (using ',(0,n.jsx)(o.code,{children:".filter()"})," which keeps truthy values), the actual behavior has been the opposite. Since this behavior has existed for so long, it's now considered the expected behavior and the documentation has been updated to reflect it."]}),"\n"]}),"\n",(0,n.jsxs)(o.p,{children:["The frame object passed into ",(0,n.jsx)(o.code,{children:"veto"})," has these properties."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"functionName:  the name of the function or null if an anonymous function\nlineNumber:    the line number of the error\ncolumnNumber:  the column number of the error\nfileName:      the name of the file\n"})}),"\n",(0,n.jsx)(o.h3,{id:"react-js-source-maps",children:"React JS Source Maps"}),"\n",(0,n.jsxs)(o.p,{children:["Source maps for projects in webpack need to have the ",(0,n.jsx)(o.code,{children:"devtool"})," set to ",(0,n.jsx)(o.code,{children:"source-map"}),". On ",(0,n.jsx)(o.code,{children:"create-react-app"})," based apps, they use ",(0,n.jsx)(o.code,{children:"eval"}),", so this will not work. You will have to switch your development webpack configuration to support this."]}),"\n",(0,n.jsx)(o.p,{children:"You also have the option to not do source map lookups, but still pass errors along by going into offline mode."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-js",children:"Reactotron.configure()\n  .use(\n    trackGlobalErrors({\n      offline: true,\n    })\n  )\n  .connect();\n"})}),"\n",(0,n.jsx)(o.h1,{id:"how-it-works-internally",children:"How It Works Internally"}),"\n",(0,n.jsx)(o.h3,{id:"react-js",children:"React JS"}),"\n",(0,n.jsxs)(o.p,{children:["It hijacks the browser's ",(0,n.jsx)(o.code,{children:"window.onerror"})," event, immediately calling the previous ",(0,n.jsx)(o.code,{children:"onerror"}),", then attempts to resolve the source of the errors via a source-map lookup. If successful, it throws a message over to Reactotron."]}),"\n",(0,n.jsx)(o.h3,{id:"react-native",children:"React Native"}),"\n",(0,n.jsxs)(o.p,{children:["On React Native, it hooks ",(0,n.jsx)(o.code,{children:"NativeModules.LogBox.addException"}),". This is an internal method that React Native uses internally to report errors to LogBox. It always calls the original function so it won't break anything internally. Your Red Box will still show."]}),"\n",(0,n.jsx)(o.p,{children:"Because we're hooking a Facebook internal function, this is a bit fragile. We'll stay on top of any React Native upgrades that might cause problems should the API change."})]})}function h(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>i});var r=t(6540);const n={},s=r.createContext(n);function a(e){const o=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);