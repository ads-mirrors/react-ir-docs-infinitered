"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[8454],{1115:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"react-native-mlkit/object-detection/using-a-custom-model","title":"Using a custom model","description":"Your custom model needs to be compatible with MLKit. Refer","source":"@site/docs/react-native-mlkit/object-detection/using-a-custom-model.md","sourceDirName":"react-native-mlkit/object-detection","slug":"/react-native-mlkit/object-detection/using-a-custom-model","permalink":"/react-native-mlkit/object-detection/using-a-custom-model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"React Native MLKit","previous":{"title":"Getting Started","permalink":"/react-native-mlkit/object-detection/"},"next":{"title":"Options","permalink":"/react-native-mlkit/object-detection/options"}}');var s=o(4848),i=o(8453);const d={sidebar_position:3},c="Using a custom model",l={},r=[{value:"1. Add your model to the project",id:"1-add-your-model-to-the-project",level:2},{value:"2. Configure Metro to bundle TFLite files",id:"2-configure-metro-to-bundle-tflite-files",level:2},{value:"3. Set up the model context provider",id:"3-set-up-the-model-context-provider",level:2},{value:"4. Use the model to detect objects",id:"4-use-the-model-to-detect-objects",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"using-a-custom-model",children:"Using a custom model"})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Your custom model needs to be compatible with MLKit. Refer\nto ",(0,s.jsx)(t.a,{href:"https://developers.google.com/ml-kit/custom-models",children:"Custom Models with MLKit"})," for general information on\nMLKit model compatibility, and specifically the section\non ",(0,s.jsx)(t.a,{href:"https://developers.google.com/ml-kit/custom-models#model-compatibility",children:"TensorFlow Lite model compatibility"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"1-add-your-model-to-the-project",children:"1. Add your model to the project"}),"\n",(0,s.jsxs)(t.p,{children:["Place your model somewhere that makes sense in your project. For example, you might place it in ",(0,s.jsx)(t.code,{children:"assets/models/"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cp ~/my-custom-model.tflite ./assets/models/my-custom-model.tflite\n"})}),"\n",(0,s.jsx)(t.h2,{id:"2-configure-metro-to-bundle-tflite-files",children:"2. Configure Metro to bundle TFLite files"}),"\n",(0,s.jsx)(t.p,{children:"Metro usually ignores unknown file types when bundling the app."}),"\n",(0,s.jsxs)(t.p,{children:["Update your metro config so Metro knows to include ",(0,s.jsx)(t.code,{children:".tflite"})," files in the app bundle."]}),"\n",(0,s.jsxs)(t.p,{children:["To do this, create / edit your ",(0,s.jsx)(t.code,{children:"./metro.config.js"})," file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// metro.config.js\nconst { getDefaultConfig } = require("expo/metro-config");\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.assetExts.push(\n// Adds support for `.tflite` files for TFLite models\n  "tflite"\n);\n\nmodule.exports = config;\n'})}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"https://docs.expo.dev/guides/customizing-metro/#adding-more-file-extensions-to-assetexts",children:"Expo Docs"})," for\ndetailed instructions on ",(0,s.jsx)(t.a,{href:"https://docs.expo.dev/guides/customizing-metro",children:"customizing metro"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"3-set-up-the-model-context-provider",children:"3. Set up the model context provider"}),"\n",(0,s.jsx)(t.p,{children:"Define your models configuration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import {\n  ObjectDetectionConfig,\n  useObjectDetectionModels,\n  useObjectDetectionProvider,\n} from "react-native-mlkit-object-detection";\n\nconst MODELS: ObjectDetectionConfig = {\n// the name you\'ll use to refer to the model\n  myCustomModel: {\n// the relative path to the model file\n    model: require("./assets/models/my-custom-model.tflite"),\n    options: {\n// the options you want to use for this model\n      shouldEnableMultipleObjects: false,\n      shouldEnableClassification: false,\n      detectorMode: "singleImage",\n    },\n  },\n};\n\nfunction App() {\n// load the models\n  const models = useObjectDetectionModels({\n    assets: MODELS,\n    loadDefaultModel: false,\n  });\n\n// fetch the provider\n  const { ObjectDetectionModelProvider } = useObjectDetectionProvider(models);\n\n  return (\n    <ObjectDetectionModelProvider>\n      {/* Rest of your app */ }\n    < /ObjectDetectionModelProvider>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"4-use-the-model-to-detect-objects",children:"4. Use the model to detect objects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"// MyComponent.tsx\nimport React, { useState, useEffect } from 'react';\nimport { View } from 'react-native';\nimport {\n  useObjectDetection,\n  ObjectDetectionObject,\n} from \"@infinitered/react-native-mlkit-object-detection\";\n\ntype Props = {\n  imagePath: string;\n};\n\nfunction MyComponent({ imagePath }: Props) {\n// fetch the model from the hook\n  const detector = useObjectDetection(\"myCustomModel\");\n\n  const [modelLoaded, setModelLoaded] = useState(detector?.isLoaded() ?? false);\n\n// Models must be loaded before they can be used. This can be slow, and consume\n// a lot of resources so consider carefully where and when to load the model\n  useEffect(() => {\n// Loading models is done asynchronously, so in a useEffect we need to wrap it in an async function\n    async function loadModel() {\n      if (!detector || modelLoaded) return;\n// load the model\n      await detector.load();\n// set the model loaded state to true\n      setModelLoaded(true);\n    }\n\n    loadModel();\n  }, [detector, modelLoaded]);\n\n// the output of the model is an array of ObjectDetectionObject objects\n  const [result, setResult] = useState<ObjectDetectionObject[]>([]);\n\n  useEffect(() => {\n// don't try to detect objects if the model isn't loaded\n    if (!modelLoaded) return;\n\n// model.detectObjects is async, so when we use it in a useEffect, we need to wrap it in an async function\n    async function detectObjects(imagePath: string) {\n      const result = await detector.detectObjects(imagePath);\n      setResult(result);\n    }\n\n    if (imagePath) {\n      detectObjects(imagePath);\n    }\n  }, [detector, modelLoaded, imagePath]);\n\n  return <View>{JSON.stringify(result)}</View>;\n}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>c});var n=o(6540);const s={},i=n.createContext(s);function d(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);