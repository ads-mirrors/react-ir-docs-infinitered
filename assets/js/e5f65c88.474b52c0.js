"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[5429],{3173:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=n(4848),i=n(8453);const o={sidebar_position:100},r="Testing Ignite Apps",c={id:"ignite-cli/concept/Testing",title:"Testing Ignite Apps",description:"At Infinite Red, we want confidence that the code we are shipping isn't breaking the experience for our clients' users.",source:"@site/docs/ignite-cli/concept/Testing.md",sourceDirName:"ignite-cli/concept",slug:"/ignite-cli/concept/Testing",permalink:"/ignite-cli/concept/Testing",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100},sidebar:"Ignite",previous:{title:"Styling Ignite apps",permalink:"/ignite-cli/concept/Styling"},next:{title:"Generators",permalink:"/ignite-cli/concept/Generators"}},a={},l=[{value:"Maestro Testing",id:"maestro-testing",level:2},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Test Structure",id:"test-structure",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Writing Tests",id:"writing-tests",level:3},{value:"When to write Unit Tests",id:"when-to-write-unit-tests",level:3},{value:"Mocking",id:"mocking",level:2},{value:"Mock Functions",id:"mock-functions",level:3},{value:"Mock Modules",id:"mock-modules",level:3},{value:"React Native Modules",id:"react-native-modules",level:3},{value:"Resources",id:"resources",level:2},{value:"Libraries",id:"libraries",level:3},{value:"Relevant Reading",id:"relevant-reading",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"testing-ignite-apps",children:"Testing Ignite Apps"}),"\n",(0,s.jsx)(t.p,{children:"At Infinite Red, we want confidence that the code we are shipping isn't breaking the experience for our clients' users."}),"\n",(0,s.jsx)(t.p,{children:"Our philosophy is roughly based on the following idea from Guillermo Rauch:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Write tests. Not too many. Mostly integration."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This isn't a hard and fast rule, but it does express our approach fairly well."}),"\n",(0,s.jsx)(t.h2,{id:"maestro-testing",children:"Maestro Testing"}),"\n",(0,s.jsxs)(t.p,{children:["We provide an ",(0,s.jsx)(t.a,{href:"https://ignitecookbook.com/docs/recipes/MaestroSetup",children:"Ignite Cookbook recipe"})," to help explain how to get started and run Maestro tests once you have ignited your app"]}),"\n",(0,s.jsx)(t.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Unit tests cover the smallest parts of code, like individual functions or classes."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["-- ",(0,s.jsxs)("cite",{children:[(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/testing-overview#unit-tests",children:"React Native docs"}),", under ",(0,s.jsx)(t.a,{href:"https://creativecommons.org/licenses/by/4.0/",children:"CC By 4.0"})]})]}),"\n",(0,s.jsx)(t.h3,{id:"test-structure",children:"Test Structure"}),"\n",(0,s.jsx)(t.p,{children:"In Ignite, we include unit tests for pure functions, such as models or utility functions."}),"\n",(0,s.jsxs)(t.p,{children:["Ignite uses Jest as our test runner. Jest tests are written using ",(0,s.jsx)(t.code,{children:"it"})," or ",(0,s.jsx)(t.code,{children:"test"})," statements, which take a describe of the test, and a function to execute the test code."]}),"\n",(0,s.jsxs)(t.p,{children:['Then, inside the test function, we can make "assertions", or what we expect a value to be using the ',(0,s.jsx)(t.code,{children:"expect"})," function. We pass the value as the first argument to the ",(0,s.jsx)(t.code,{children:"expect"}),' function, then we use one of the "matcher" methods on ',(0,s.jsx)(t.code,{children:"expect"}),", such as ",(0,s.jsx)(t.code,{children:".toBe"})," to describe what the value should match."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/testing-overview#unit-tests",children:"The React Native doc"})," provide the following example for a unit test:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'it("given a date in the past, colorForDueDate() returns red", () => {\n  const input = colorForDueDate("2000-10-20")\n  expect(input).toBe("red")\n})\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Jest functions like ",(0,s.jsx)(t.code,{children:"it"}),", ",(0,s.jsx)(t.code,{children:"test"}),", ",(0,s.jsx)(t.code,{children:"expect"}),", and more are loaded globally by the Jest test runner, so you don't need to import them."]}),"\n",(0,s.jsx)(t.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"When writing a test, do your best to make sure that your tests > include the following information:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Given - some precondition"}),"\n",(0,s.jsx)(t.li,{children:"When - some action executed by the function that you\u2019re testing"}),"\n",(0,s.jsx)(t.li,{children:"Then - the expected outcome\nThis is also known as AAA (Arrange, Act, Assert)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["-- ",(0,s.jsx)("cite",{children:(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/testing-overview#structuring-tests",children:"Structuring Tests in React Native Docs"})})]}),"\n",(0,s.jsxs)(t.p,{children:["You can read more about how to best practices for creating tests in the ",(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/testing-overview#structuring-tests",children:"Structuring Tests"})," section of the React Native docs."]}),"\n",(0,s.jsx)(t.h3,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,s.jsxs)(t.p,{children:["To write your own tests, create a ",(0,s.jsx)(t.code,{children:".test.ts"})," file within the ",(0,s.jsx)(t.code,{children:"app"})," or ",(0,s.jsx)(t.code,{children:"test"})," directory."]}),"\n",(0,s.jsxs)(t.p,{children:["Then run ",(0,s.jsx)(t.code,{children:"yarn test"})," to run all unit tests using Jest."]}),"\n",(0,s.jsxs)(t.p,{children:["When writing tests, you can also run Jest in watch mode by running ",(0,s.jsx)(t.code,{children:"yarn test:watch"}),". This will start a long running Jest process, that re-runs your tests on save in your editor. This is useful for iterating on values and getting quick feedback about whether your changes were successful or not."]}),"\n",(0,s.jsx)(t.h3,{id:"when-to-write-unit-tests",children:"When to write Unit Tests"}),"\n",(0,s.jsx)(t.p,{children:'The most important question to ask when writing tests is "what code should be unit tested?" Not every line of code will benefit from a unit test. Typically, you\'ll want a unit test when you have code that can be run without external dependencies (like an API) that has some non-trivial logic.'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"complicated regexes"}),": for many developers, regex's only make sense as you are writing them. Testing with a series of valid and invalid inputs can help ensure that they work as intended for future developers."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"nested if/else statements"}),": if you rely heavily on a function with a lot of if/else statements, it can be helpful to have tests to make sure that you can visit each condition. Often times when we have more than a handful of conditionals, it can become impossible to visit all of them without realizing it."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"validation functions"}),": often times we may write functions like ",(0,s.jsx)(t.code,{children:"isJson()"})," to validate that a value is a specific shape. If critical parts of our code rely on the correctness of this function, we want to test that code!"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"mocking",children:"Mocking"}),"\n",(0,s.jsx)(t.p,{children:"However, often our code is not entirely written as pure functions. Most apps have side effects like making network requests, calling native modules, or reaching for global objects."}),"\n",(0,s.jsx)(t.p,{children:"In integration tests, we can set up a suitable testing environment to handle these side effects."}),"\n",(0,s.jsx)(t.p,{children:"But in unit tests, where we want to test an isolated piece of code, another option is to provide mocks for these external dependencies."}),"\n",(0,s.jsx)(t.p,{children:"Jest provides a variety of mocking strategies for our code:"}),"\n",(0,s.jsx)(t.h3,{id:"mock-functions",children:"Mock Functions"}),"\n",(0,s.jsx)(t.p,{children:"You can create a mock callback function in Jest like so:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// take the input value, and add 42\nconst mockCallback = jest.fn((x) => 42 + x)\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback can be called like a normal function"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const added = [0, 1].map(mockCallback)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["But it also has a variety of properties added to it, such as ",(0,s.jsx)(t.code,{children:".mock"}),", which you can assert against later in tests."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// The mock function is called twice, once for each item in the array\nexpect(mockCallback.mock.calls.length).toBe(2)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This particular example from the ",(0,s.jsx)(t.a,{href:"https://jestjs.io/docs/mock-functions#using-a-mock-function",children:"official Jest docs"}),". You can read more about about ",(0,s.jsxs)(t.a,{href:"https://jestjs.io/docs/mock-functions#mock-property",children:["what other properties are available on the ",(0,s.jsx)(t.code,{children:".mock"})," property"]})," as well at the Jest docs."]}),"\n",(0,s.jsx)(t.h3,{id:"mock-modules",children:"Mock Modules"}),"\n",(0,s.jsxs)(t.p,{children:["Testing code that touches other libraries such as ",(0,s.jsx)(t.code,{children:"axios"})," can be challenging, because we need to rely on the network for what gets returned from users."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import { View, Text } from "react-native"\nimport axios from "axios"\n\nexport const getUsers = () => axios.get("/users").then((res) => res.data)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["One way to solve this, is by mocking the ",(0,s.jsx)(t.code,{children:"axios"})," library to return a static list of users, so that we can reliably get the same information in our tests."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import axios from "axios"\nimport { getUsers } from "./users"\n\njest.mock("axios")\n\ntest("should fetch users", () => {\n  const users = [{ name: "Bob" }]\n  const res = { data: users }\n\n  axios.get.mockImplementation(() => Promise.resolve(res))\n\n  getUsers().then((data) => {\n    expect(data).toEqual(users)\n  })\n})\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This example is derived from the the ",(0,s.jsx)(t.a,{href:"https://jestjs.io/docs/mock-functions#mocking-modules",children:"Mocking Modules"})," section of the Jest docs, where you can read about more sophisticated use cases."]}),"\n",(0,s.jsx)(t.h3,{id:"react-native-modules",children:"React Native Modules"}),"\n",(0,s.jsx)(t.p,{children:"In addition to regular Javascript libraries, you can also mock out native modules in React Native. Using the following syntax"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"jest.mock('react-native-video', () => 'Video');\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The first argument of ",(0,s.jsx)(t.code,{children:"jest.mock"})," is the name of the module want to mock, but you can also pass a second argument to provide a function that returns the module."]}),"\n",(0,s.jsx)(t.p,{children:"In this example, this will return a default export."}),"\n",(0,s.jsxs)(t.p,{children:["This example is derived from ",(0,s.jsx)(t.a,{href:"https://jestjs.io/docs/tutorial-react-native#mock-native-modules-using-jestmock",children:"Testing React Native"})," section of the Jest docs, where you can read more."]}),"\n",(0,s.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsx)(t.h3,{id:"libraries",children:"Libraries"}),"\n",(0,s.jsx)(t.p,{children:"There are a variety of testing libraries available in React Native that you may find useful to add to your Ignite app"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://callstack.github.io/react-native-testing-library/",children:"React Native Testing Library"})," - port of @testing-library/react for React Native. Useful for unit testing components."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://wix.github.io/Detox/",children:"Detox"})," and ",(0,s.jsx)(t.a,{href:"https://appium.io/",children:"Appium"})," - alternatives for integration testing to Maestro."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"relevant-reading",children:"Relevant Reading"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/testing-overview",children:"React Native docs on Testing"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://jestjs.io/docs/tutorial-react-native",children:"Testing React Native Apps with Jest"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://maestro.mobile.dev/#why-maestro",children:"Why Maestro?"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://kentcdodds.com/blog?q=test",children:"Kent C. Dodds articles on Testing"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);