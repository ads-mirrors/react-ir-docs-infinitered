"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[4208],{4995:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>i});var n=s(4848),o=s(8453);const r={sidebar_position:31},d="Button",c={id:"ignite-cli/boilerplate/app/components/Button",title:"Button",description:"The Button component is a wrapper around the Pressable component. Any prop that can be passed to Pressable can be passed to Button and it will be forwarded. Button renders a button with given text in a Text component or children. It allows you to specify the preset style of the button, you can override both the Pressable and Text styles.",source:"@site/docs/ignite-cli/boilerplate/app/components/Button.md",sourceDirName:"ignite-cli/boilerplate/app/components",slug:"/ignite-cli/boilerplate/app/components/Button",permalink:"/ignite-cli/boilerplate/app/components/Button",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:31,frontMatter:{sidebar_position:31},sidebar:"Ignite",previous:{title:"AutoImage",permalink:"/ignite-cli/boilerplate/app/components/AutoImage"},next:{title:"Card",permalink:"/ignite-cli/boilerplate/app/components/Card"}},l={},i=[{value:"Props",id:"props",level:2},{value:"<code>text</code>",id:"text",level:3},{value:"<code>tx</code>",id:"tx",level:3},{value:"<code>children</code>",id:"children",level:3},{value:"<code>preset</code>",id:"preset",level:3},{value:"<code>textStyle</code>",id:"textstyle",level:3},{value:"<code>pressedTextStyle</code>",id:"pressedtextstyle",level:3},{value:"<code>disabledTextStyle</code>",id:"disabledtextstyle",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>pressedStyle</code>",id:"pressedstyle",level:3},{value:"<code>disabledStyle</code>",id:"disabledstyle",level:3},{value:"<code>LeftAccessory</code> and <code>RightAccessory</code>",id:"leftaccessory-and-rightaccessory",level:3},{value:"<code>disabled</code>",id:"disabled",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"button",children:"Button"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Button"})," component is a wrapper around the ",(0,n.jsx)(t.a,{href:"https://reactnative.dev/docs/pressable",children:(0,n.jsx)(t.code,{children:"Pressable"})})," component. Any prop that can be passed to ",(0,n.jsx)(t.code,{children:"Pressable"})," can be passed to ",(0,n.jsx)(t.code,{children:"Button"})," and it will be forwarded. ",(0,n.jsx)(t.code,{children:"Button"})," renders a button with given text in a ",(0,n.jsx)(t.a,{href:"/ignite-cli/boilerplate/app/components/Text",children:(0,n.jsx)(t.code,{children:"Text"})})," component or children. It allows you to specify the preset style of the button, you can override both the ",(0,n.jsx)(t.code,{children:"Pressable"})," and ",(0,n.jsx)(t.code,{children:"Text"})," styles."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://github.com/user-attachments/assets/485e0fe9-caba-4477-ae29-39bd30107809",alt:"button-component"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button\n  text="Click It"\n  tx="button:clickIt"\n  preset="default"\n  onPress={() => Alert.alert("pressed")}\n  style={[{ paddingVertical: 100 }, { borderRadius: 0 }]}\n  pressedStyle={[{ backgroundColor: "red" }, { borderRadius: 0 }]}\n  textStyle={[{ fontSize: 20 }, { color: "#a511dc" }]}\n  pressedTextStyle={[{ fontSize: 20 }, { color: "#a51111" }]}\n  RightAccessory={(props) => <Icon icon="check" />}\n  LeftAccessory={(props) => <Icon icon="close" />}\n/>\n'})}),"\n",(0,n.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,n.jsx)(t.h3,{id:"text",children:(0,n.jsx)(t.code,{children:"text"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"text"})," prop is required if ",(0,n.jsx)(t.code,{children:"tx"})," or ",(0,n.jsx)(t.code,{children:"children"})," are not provided. This is the text to be rendered in the button."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button text="Click me" />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"tx",children:(0,n.jsx)(t.code,{children:"tx"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"tx"})," prop is required if ",(0,n.jsx)(t.code,{children:"text"})," or ",(0,n.jsx)(t.code,{children:"children"})," are not provided. This is the translation key to be used to translate the text."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button tx="button:clickMe" />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"children",children:(0,n.jsx)(t.code,{children:"children"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"children"})," prop is required if no ",(0,n.jsx)(t.code,{children:"tx"})," or ",(0,n.jsx)(t.code,{children:"text"})," prop is passed. This is the content to be rendered in the button in place of the default ",(0,n.jsx)(t.code,{children:"Text"})," component."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"<Button>\n  <Text>Click me</Text>\n</Button>\n"})}),"\n",(0,n.jsx)(t.h3,{id:"preset",children:(0,n.jsx)(t.code,{children:"preset"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"preset"})," prop is optional. This is the preset style of the button. It can be one of the following built-in options: ",(0,n.jsx)(t.code,{children:"default"}),", ",(0,n.jsx)(t.code,{children:"filled"}),", ",(0,n.jsx)(t.code,{children:"reversed"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button preset="default" tx="button:clickMe" />\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To make a custom preset, add a key to the ",(0,n.jsx)(t.code,{children:"$viewPresets"}),", ",(0,n.jsx)(t.code,{children:"$textPresets"}),", ",(0,n.jsx)(t.code,{children:"$pressedViewPresets"})," and ",(0,n.jsx)(t.code,{children:"$pressedTextPresets"})," objects in ",(0,n.jsx)(t.code,{children:"app/components/Button.tsx"})," and then pass the name of the preset to the ",(0,n.jsx)(t.code,{children:"preset"})," prop."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"const $viewPresets = {\n  // ...\n  danger: [$baseViewStyle, { backgroundColor: colors.palette.angry500 }] as StyleProp<ViewStyle>,\n}\n\nconst $textPresets: Record<Presets, StyleProp<TextStyle>> = {\n  // ...\n  danger: [$baseTextStyle, { color: colors.palette.angry500 }] as StyleProp<TextStyle>,\n}\n\nconst $pressedViewPresets: Record<Presets, StyleProp<ViewStyle>> = {\n  // ...\n  danger: { backgroundColor: colors.palette.angry500 },\n}\n\nconst $pressedTextPresets: Record<Presets, StyleProp<TextStyle>> = {\n  angry: { opacity: 0.7 },\n}\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button preset="danger" text="Delete" />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"textstyle",children:(0,n.jsx)(t.code,{children:"textStyle"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"textStyle"})," prop is optional. This can be used to style text in the button. Values passed here will override anything set in the preset."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button textStyle={{ fontSize: 20, color: "#a511dc" }} />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"pressedtextstyle",children:(0,n.jsx)(t.code,{children:"pressedTextStyle"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"pressedTextStyle"})," prop is optional. This can be used to style text in the button when it is pressed. Values passed here will override anything set in the preset."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button pressedTextStyle={{ fontSize: 20, color: "#a51111" }} />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"disabledtextstyle",children:(0,n.jsx)(t.code,{children:"disabledTextStyle"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"disabledTextStyle"})," prop is optional. It can be used to style text in the button when the ",(0,n.jsx)(t.code,{children:"disabled"})," prop is set. Values here will override anything set in the preset."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button disabled disabledTextStyle={{ fontSize: 20, color: "#000000" }} />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"style",children:(0,n.jsx)(t.code,{children:"style"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"style"})," prop is optional. This can be used to style the ",(0,n.jsx)(t.code,{children:"Pressable"})," component of the ",(0,n.jsx)(t.code,{children:"Button"}),". Values passed here will override anything set in the preset."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"<Button style={{ paddingVertical: 20, borderRadius: 10 }}>\n"})}),"\n",(0,n.jsx)(t.h3,{id:"pressedstyle",children:(0,n.jsx)(t.code,{children:"pressedStyle"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"pressedStyle"})," prop is optional. This can be used to style the ",(0,n.jsx)(t.code,{children:"Pressable"})," component of the ",(0,n.jsx)(t.code,{children:"Button"})," when it is pressed. Values passed here will override anything set in the preset."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button pressedStyle={{ backgroundColor: "red" }} />\n'})}),"\n",(0,n.jsx)(t.h3,{id:"disabledstyle",children:(0,n.jsx)(t.code,{children:"disabledStyle"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"disabledStyle"})," prop is optional. This can be used to style the ",(0,n.jsx)(t.code,{children:"Pressable"})," component of the ",(0,n.jsx)(t.code,{children:"Button"})," when the ",(0,n.jsx)(t.code,{children:"disabled"})," prop is truthy. Values passed here will override anything set in the preset."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"<Button disabledStyle={{ opacity: 0.5 }} />\n"})}),"\n",(0,n.jsxs)(t.h3,{id:"leftaccessory-and-rightaccessory",children:[(0,n.jsx)(t.code,{children:"LeftAccessory"})," and ",(0,n.jsx)(t.code,{children:"RightAccessory"})]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"LeftAccessory"})," and ",(0,n.jsx)(t.code,{children:"RightAccessory"})," props are optional. They can be used to render an accessory on the left or right side of the button. It can be a React component or a function that returns a React component. The accessory component will receive the pressed state of the ",(0,n.jsx)(t.code,{children:"Pressable"})," via the ",(0,n.jsx)(t.code,{children:"pressableState"})," prop, so you can make a custom accessory component render differently when pressed. Additionally, you can utilize the default accessory styles via the ",(0,n.jsx)(t.code,{children:"style"})," prop."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button\n  LeftAccessory={(props) => (\n    <Icon containerStyle={props.style} size={props.pressableState.pressed ? 50 : 40} icon="check" />\n  )}\n/>\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button\n  RightAccessory={(props) => (\n    <Icon containerStyle={props.style} size={props.pressableState.pressed ? 50 : 40} icon="check" />\n  )}\n/>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If the accessories flicker when some prop or state changes, you can memoize the accessory with ",(0,n.jsx)(t.code,{children:"useMemo"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<Button\n  LeftAccessory={useMemo(\n    () =>\n      function LeftIcon(props: ButtonAccessoryProps) {\n        return <Icon icon={props.pressableState.pressed ? "view" : "hidden"} />\n      },\n    [],\n  )}\n/>\n'})}),"\n",(0,n.jsx)(t.h3,{id:"disabled",children:(0,n.jsx)(t.code,{children:"disabled"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"disabled"})," prop is optional. It gets passed to the underlying ",(0,n.jsx)(t.code,{children:"Pressable"})," component. When truthy, it will ",(0,n.jsx)(t.a,{href:"https://reactnative.dev/docs/pressable#disabled",children:"disable the press behavior on the pressable"}),". It will also update the ",(0,n.jsx)(t.a,{href:"https://reactnative.dev/docs/0.72/touchablewithoutfeedback#accessibilitystate",children:(0,n.jsx)(t.code,{children:"accessibilityState"})})," of the ",(0,n.jsx)(t.code,{children:"Pressable"})," when set."]}),"\n",(0,n.jsxs)(t.p,{children:["This prop will be passed down to the ",(0,n.jsx)(t.code,{children:"LeftAccessory"})," and ",(0,n.jsx)(t.code,{children:"RightAccessory"})," components, if they exist, and will cause the ",(0,n.jsx)(t.code,{children:"disabledStyle"})," and ",(0,n.jsx)(t.code,{children:"disabledTextStyle"})," props to be used, if they have been set."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>c});var n=s(6540);const o={},r=n.createContext(o);function d(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);