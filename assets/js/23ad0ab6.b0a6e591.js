"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[5596],{89:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"reactotron/plugins/networking","title":"Networking","description":"The networking plugin is reactotron-react-native which allows you to track all XMLHttpRequests in React Native.","source":"@site/docs/reactotron/plugins/networking.md","sourceDirName":"reactotron/plugins","slug":"/reactotron/plugins/networking","permalink":"/reactotron/plugins/networking","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Networking"},"sidebar":"Reactotron","previous":{"title":"Mobx State Tree","permalink":"/reactotron/plugins/mst"},"next":{"title":"Open In Editor","permalink":"/reactotron/plugins/open-in-editor"}}');var r=t(4848),i=t(8453);const s={title:"Networking"},a="Networking",c={},l=[{value:"Usage",id:"usage",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"networking",children:"Networking"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"networking"})," plugin is ",(0,r.jsx)(n.code,{children:"reactotron-react-native"})," which allows you to track all XMLHttpRequests in React Native."]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["To use the ",(0,r.jsx)(n.code,{children:"networking"})," plugin, you need to add the additional plugin on the ",(0,r.jsx)(n.code,{children:"import"})," line."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import Reactotron, { networking } from "reactotron-react-native";\n'})}),"\n",(0,r.jsx)(n.p,{children:"Next, add it as a plugin to Reactotron."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"Reactotron.configure()\n  .use(networking()) // <--- here we go!\n  .connect();\n"})}),"\n",(0,r.jsx)(n.p,{children:"And you're done! Now you can see your XMLHttpRequests in Reactotron."}),"\n",(0,r.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"networking()"})," also accepts an object with two options:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ignoreContentTypes"}),": a regular expression which, when matched against the ",(0,r.jsx)(n.code,{children:"Content-Type"})," response header, will prevent the data from being displayed in Reactotron. You typically want to do this for images (which is the default)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ignoreUrls"}),": a regular expression which, when matched against the URL of the XHR, will prevent the request from being tracked in Reactotron. Can be useful for ignoring noisy logging requests."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"networking({\n  ignoreContentTypes: /^(image)\\/.*$/i,\n  ignoreUrls: /\\/(logs|symbolicate)$/,\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);