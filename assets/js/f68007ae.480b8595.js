"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[8454],{1340:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>r});var n=o(4848),s=o(8453);const i={sidebar_position:3},d="Using a custom model",c={id:"react-native-mlkit/object-detection/using-a-custom-model",title:"Using a custom model",description:"Your custom model needs to be compatible with MLKit. Refer",source:"@site/docs/react-native-mlkit/object-detection/using-a-custom-model.md",sourceDirName:"react-native-mlkit/object-detection",slug:"/react-native-mlkit/object-detection/using-a-custom-model",permalink:"/react-native-mlkit/object-detection/using-a-custom-model",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"React Native MLKit",previous:{title:"Getting Started",permalink:"/react-native-mlkit/object-detection/"},next:{title:"Options",permalink:"/react-native-mlkit/object-detection/options"}},l={},r=[{value:"1. Add your model to the project",id:"1-add-your-model-to-the-project",level:2},{value:"2. Configure Metro to bundle TFLite files",id:"2-configure-metro-to-bundle-tflite-files",level:2},{value:"3. Set up the model context provider",id:"3-set-up-the-model-context-provider",level:2},{value:"3. Fetch the model using the <code>useObjectDetectionModel</code> hook, and use it to detect objects in an image",id:"3-fetch-the-model-using-the-useobjectdetectionmodel-hook-and-use-it-to-detect-objects-in-an-image",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"using-a-custom-model",children:"Using a custom model"}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["Your custom model needs to be compatible with MLKit. Refer\nto ",(0,n.jsx)(t.a,{href:"https://developers.google.com/ml-kit/custom-models",children:"Custom Models with MLKit"})," for general information on\nMLKit model compatibility, and specifically the section\non ",(0,n.jsx)(t.a,{href:"https://developers.google.com/ml-kit/custom-models#model-compatibility",children:"TensorFlow Lite model compatibility"}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"1-add-your-model-to-the-project",children:"1. Add your model to the project"}),"\n",(0,n.jsxs)(t.p,{children:["Place your model somewhere that makes sense in your project. For example, you might place it in ",(0,n.jsx)(t.code,{children:"assets/models/"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"cp ~/my-custom-model.tflite ./assets/models/my-custom-model.tflite\n"})}),"\n",(0,n.jsx)(t.h2,{id:"2-configure-metro-to-bundle-tflite-files",children:"2. Configure Metro to bundle TFLite files"}),"\n",(0,n.jsx)(t.p,{children:"Metro usually ignores unknown file types when bundling the app."}),"\n",(0,n.jsxs)(t.p,{children:["Update your metro config so Metro knows to include ",(0,n.jsx)(t.code,{children:".tflite"})," files in the app bundle."]}),"\n",(0,n.jsxs)(t.p,{children:["To do this, create / edit your ",(0,n.jsx)(t.code,{children:"./metro.config.js"})," file:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:'// metro.config.js\nconst { getDefaultConfig } = require("expo/metro-config");\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.resolver.assetExts.push(\n  // Adds support for `.tflite` files for TFLite models\n  "tflite"\n);\n\nmodule.exports = config;\n'})}),"\n",(0,n.jsxs)(t.p,{children:["See the ",(0,n.jsx)(t.a,{href:"https://docs.expo.dev/guides/customizing-metro/#adding-more-file-extensions-to-assetexts",children:"Expo Docs"})," for\ndetailed instructions on ",(0,n.jsx)(t.a,{href:"https://docs.expo.dev/guides/customizing-metro",children:"customizing metro"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"3-set-up-the-model-context-provider",children:"3. Set up the model context provider"}),"\n",(0,n.jsxs)(t.p,{children:["First define an ",(0,n.jsx)(t.code,{children:"AssetRecord"})," object with the details of your model. An asset record is a map of model names to model\ndetails."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"type ModelInfo = {\n  model: number;\n  options?: RNMLKitCustomObjectDetectorOptions;\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["For a list of options for the default models, see the ",(0,n.jsx)(t.a,{href:"../options",children:"Options"})," page."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:'// App.tsx\n\nimport {\n  AssetRecord,\n  useObjectDetectionModels,\n} from "react-native-mlkit-object-detection";\n\nconst MODELS: AssetRecord = {\n  // the name you\'ll use to refer to the model\n  myCustomModel: {\n    // the relative path to the model file\n    asset: require("./assets/models/my-custom-model.tflite"),\n    options: {\n      // the options you want to use for this model\n      shouldEnableMultipleObjects: false,\n      shouldEnableClassification: false,\n      detectorMode: "singleImage",\n    },\n  },\n};\n\n// For descriptions of options for default models see link below this snipped.\nfunction App() {\n  // fetch the provider component from the hook\n  const { ObjectDetectionModelContextProvider } = useObjectDetectionModels({\n    models: MODELS,\n    loadDefaultModel: false,\n  });\n\n  return (\n    <ObjectDetectionModelContextProvider>\n      // Rest of your app\n    </ObjectDetectionModelContextProvider>\n  );\n}\n'})}),"\n",(0,n.jsxs)(t.h2,{id:"3-fetch-the-model-using-the-useobjectdetectionmodel-hook-and-use-it-to-detect-objects-in-an-image",children:["3. Fetch the model using the ",(0,n.jsx)(t.code,{children:"useObjectDetectionModel"})," hook, and use it to detect objects in an image"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'// MyComponent.tsx\nimport {\n  useObjectDetector,\n  RNMLKitDetectedObject,\n} from "@infinitered/react-native-mlkit-object-detection";\n\nfunction MyComponent() {\n  // fetch the model from the hook, if you don\'t pass a model name it will fetch the default MLKit Object Detection model\n  const { model } = useObjectDetector("myCustomModel");\n\n  const [modelLoaded, setModelLoaded] = useState(model?.isLoaded() ?? false);\n\n  // Models must be loaded before they can be used. This can be slow, and consume\n  // a lot of resources so consider carefully where and when to load the model\n  React.useEffect(() => {\n    // Loading models is done asynchronously, so in a useEffect we need to wrap it in an async function\n    async function loadModel() {\n      if (!model || modelIsLoaded) return;\n      // load the model\n      await model.load();\n      // set the model loaded state to true\n      setModelLoaded(true);\n    }\n\n    loadModel();\n  }, [model, modelIsLoaded]);\n\n  // the output of the model is an array of `RNMLKitDetectedObject` objects\n  const [result, setResult] = useState<RNMLKitDetectedObject[]>([]);\n\n  useEffect(() => {\n    if (!modelLoaded) return;\n\n    // model.detectObjects is async, so when we use it in a useEffect, we need to wrap it in an async function\n    async function detectObjects(image: AssetRecord) {\n      const result = await model.detectObjects(image);\n      setResult(result);\n    }\n\n    detectObjects();\n  }, [model, modelLoaded]);\n\n  return <View>{JSON.stringify(result)}</View>;\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>c});var n=o(6540);const s={},i=n.createContext(s);function d(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);