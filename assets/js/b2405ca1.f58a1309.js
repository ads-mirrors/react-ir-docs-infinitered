"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[6725],{6076:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ignite-cli/boilerplate/app/theme/colors.ts","title":"colors.ts","description":"In app/theme/colors.ts, we define a palette of colors and the semantic names to be used in the app. The palette is meant to be a simple list of colors, and the semantic names are meant to be used throughout the app. This matches how designers often think of colors & palettes, and lets us match designs which define these easily.","source":"@site/docs/ignite-cli/boilerplate/app/theme/colors.ts.md","sourceDirName":"ignite-cli/boilerplate/app/theme","slug":"/ignite-cli/boilerplate/app/theme/colors.ts","permalink":"/ignite-cli/boilerplate/app/theme/colors.ts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"colors.ts"},"sidebar":"Ignite","previous":{"title":"context.ts","permalink":"/ignite-cli/boilerplate/app/theme/context.ts"},"next":{"title":"spacing.ts","permalink":"/ignite-cli/boilerplate/app/theme/spacing.ts"}}');var n=o(4848),a=o(8453);const r={title:"colors.ts"},i="Colors & Palettes",l={},c=[];function p(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"colors--palettes",children:"Colors & Palettes"})}),"\n",(0,n.jsxs)(t.p,{children:["In ",(0,n.jsx)(t.code,{children:"app/theme/colors.ts"}),", we define a palette of colors and the semantic names to be used in the app. The palette is meant to be a simple list of colors, and the semantic names are meant to be used throughout the app. This matches how designers often think of colors & palettes, and lets us match designs which define these easily."]}),"\n",(0,n.jsxs)(t.p,{children:["The palette color names are meant to be semantically neutral names matching the color. For example, ",(0,n.jsx)(t.code,{children:"neutral100"})," defines a neutral color, but has no specific semantic meaning for its use. If you find yourself using a color in multiple places for the same purpose (e.g. background, border, text), define a semantic color and replace the palette color usage with the semantic one. For example, if you are styling all your text field components with a border of ",(0,n.jsx)(t.code,{children:"colors.accent100"}),", define a semantic color such as ",(0,n.jsx)(t.code,{children:"textFieldBorder"})," that is set to ",(0,n.jsx)(t.code,{children:"accent100"}),". You would then use ",(0,n.jsx)(t.code,{children:"colors.textFieldBorder"})," in your components in place of the ",(0,n.jsx)(t.code,{children:"colors.accent100"})," color."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"<TextField style={{ borderColor: colors.border }} />\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>i});var s=o(6540);const n={},a=s.createContext(n);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);