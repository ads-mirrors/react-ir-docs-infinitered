"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[7698],{8719:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var r=s(4848),o=s(8453);const c={sidebar_position:38},t="Screen",i={id:"ignite-cli/boilerplate/app/components/Screen",title:"Screen",description:"This is a component that renders a screen. It is used to wrap your entire screen, and handles scrolling, safe areas insets, and keyboard avoiding behavior.",source:"@site/docs/ignite-cli/boilerplate/app/components/Screen.md",sourceDirName:"ignite-cli/boilerplate/app/components",slug:"/ignite-cli/boilerplate/app/components/Screen",permalink:"/ignite-cli/boilerplate/app/components/Screen",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:38,frontMatter:{sidebar_position:38},sidebar:"Ignite",previous:{title:"ListView",permalink:"/ignite-cli/boilerplate/app/components/ListView"},next:{title:"Text",permalink:"/ignite-cli/boilerplate/app/components/Text"}},d={},l=[{value:"Props",id:"props",level:2},{value:"<code>children</code>",id:"children",level:3},{value:"<code>style</code>",id:"style",level:3},{value:"<code>contentContainerStyle</code>",id:"contentcontainerstyle",level:3},{value:"<code>safeAreaEdges</code>",id:"safeareaedges",level:3},{value:"<code>backgroundColor</code>",id:"backgroundcolor",level:3},{value:"<code>statusBarStyle</code>",id:"statusbarstyle",level:3},{value:"<code>keyboardOffset</code>",id:"keyboardoffset",level:3},{value:"<code>StatusBarProps</code>",id:"statusbarprops",level:3},{value:"<code>KeyboardAvoidingViewProps</code>",id:"keyboardavoidingviewprops",level:3},{value:"<code>preset</code>",id:"preset",level:3},{value:"<code>keyboardShouldPersistTaps</code>",id:"keyboardshouldpersisttaps",level:3},{value:"<code>ScrollViewProps</code>",id:"scrollviewprops",level:3},{value:"<code>scrollEnabledToggleThreshold</code>",id:"scrollenabledtogglethreshold",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"screen",children:"Screen"}),"\n",(0,r.jsxs)(n.p,{children:["This is a component that renders a screen. It is used to wrap your entire screen, and handles scrolling, ",(0,r.jsx)(n.a,{href:"https://reactnavigation.org/docs/handling-safe-area/",children:"safe areas insets"}),", and keyboard avoiding behavior."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen preset="scroll">{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsx)(n.h3,{id:"children",children:(0,r.jsx)(n.code,{children:"children"})}),"\n",(0,r.jsxs)(n.p,{children:["As the ",(0,r.jsx)(n.code,{children:"Screen"})," component is a top level wrapper component, it is expected that you will pass in your screen's content as children."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen preset="scroll">{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"style",children:(0,r.jsx)(n.code,{children:"style"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"style"})," prop is an optional ",(0,r.jsx)(n.code,{children:"StyleProp<ViewStyle>"})," object that applies to the outer content ",(0,r.jsx)(n.code,{children:"View"})," component. This is useful for applying styles such as ",(0,r.jsx)(n.code,{children:"margin"})," and ",(0,r.jsx)(n.code,{children:"padding"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<Screen style={{ padding: 10 }}>{/* ... content here ... */}</Screen>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"contentcontainerstyle",children:(0,r.jsx)(n.code,{children:"contentContainerStyle"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"contentContainerStyle"})," prop is an optional ",(0,r.jsx)(n.code,{children:"StyleProp<ViewStyle>"})," object that applies to the inner content ",(0,r.jsx)(n.code,{children:"View"})," component that wraps the ",(0,r.jsx)(n.code,{children:"children"}),". This is useful for applying styles to the innermost component, such as ",(0,r.jsx)(n.code,{children:"margin"})," and ",(0,r.jsx)(n.code,{children:"padding"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<Screen contentContainerStyle={{ margin: 10 }}>{/* ... content here ... */}</Screen>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"safeareaedges",children:(0,r.jsx)(n.code,{children:"safeAreaEdges"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"safeAreaEdges"})," prop is an an array of ",(0,r.jsx)(n.code,{children:"SafeAreaEdges"}),' that determines which edges of the screen should be considered safe areas. This is useful for handling the notch on iPhone X and other devices. Usage of this prop depends on how the Screen is used. If you have a Header above the screen, the "top" Edge can be omitted. If you have a TabBar, the "bottom" edge can be omitted. In other cases, a value of ',(0,r.jsx)(n.code,{children:'["top", "bottom"]'})," is recommended. The default value is ",(0,r.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen safeAreaEdges={["top", "bottom"]}>{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"backgroundcolor",children:(0,r.jsx)(n.code,{children:"backgroundColor"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"backgroundColor"})," prop is an optional ",(0,r.jsx)(n.code,{children:"string"})," that determines the background color of the outer wrapper component. The default value is ",(0,r.jsx)(n.code,{children:"colors.background"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen backgroundColor="red">{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"statusbarstyle",children:(0,r.jsx)(n.code,{children:"statusBarStyle"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"statusBarStyle"})," prop is a prop that determines the style of the status bar. It can be either ",(0,r.jsx)(n.code,{children:'"light"'})," or ",(0,r.jsx)(n.code,{children:'"dark"'}),". The default value is ",(0,r.jsx)(n.code,{children:'"dark"'}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen statusBarStyle="light">{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"keyboardoffset",children:(0,r.jsx)(n.code,{children:"keyboardOffset"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"keyboardOffset"})," prop is an optional ",(0,r.jsx)(n.code,{children:"number"})," that determines the offset of the keyboard when it is shown. It is passed to the ",(0,r.jsx)(n.code,{children:"keyboardVerticalOffset"})," of the ",(0,r.jsx)(n.code,{children:"KeyboardAvoidingView"}),". The default value is ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<Screen keyboardOffset={10}>{/* ... content here ... */}</Screen>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"statusbarprops",children:(0,r.jsx)(n.code,{children:"StatusBarProps"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"StatusBarProps"})," prop is an object that is passed as props to the ",(0,r.jsx)(n.code,{children:"expo-status-bar"})," ",(0,r.jsx)(n.a,{href:"https://docs.expo.io/versions/latest/sdk/status-bar/",children:(0,r.jsx)(n.code,{children:"StatusBar"})})," component."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<Screen StatusBarProps={{ animated: false }}>{/* ... content here ... */}</Screen>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"keyboardavoidingviewprops",children:(0,r.jsx)(n.code,{children:"KeyboardAvoidingViewProps"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"KeyboardAvoidingViewProps"})," prop is an object that is passed as props to the ",(0,r.jsx)(n.a,{href:"https://reactnative.dev/docs/keyboardavoidingview",children:(0,r.jsx)(n.code,{children:"KeyboardAvoidingView"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen KeyboardAvoidingViewProps={{ behavior: "padding" }}>{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"preset",children:(0,r.jsx)(n.code,{children:"preset"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"preset"})," prop is an optional enum that applies to the outer ",(0,r.jsx)(n.code,{children:"KeyboardAvoidingView"})," component. The predefined presets with ignite deal with different use cases for scroll behavior and keyboard avoiding behavior. It defaults to ",(0,r.jsx)(n.code,{children:"scroll"})," behavior if not set."]}),"\n",(0,r.jsx)(n.p,{children:"The predefined presets are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"scroll"})," - A preset that applies a scroll behavior to the screen. This is useful for forms or other screens which require a keyboard."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fixed"})," - A preset that applies a fixed behavior to the screen. i.e. The screen will not scroll. This is useful if you have a component such as a ",(0,r.jsx)(n.code,{children:"FlashList"})," that has its own scrolling behavior."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"auto"})," - A preset that applies an automatic behavior to the screen. i.e. The screen will scroll if the content is larger than the screen, but not otherwise."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen preset="scroll">{/* ... content here ... */}</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"keyboardshouldpersisttaps",children:(0,r.jsx)(n.code,{children:"keyboardShouldPersistTaps"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"keyboardShouldPersistTaps"})," optional prop is a enum that determines if the keyboard should persist taps. It defaults to ",(0,r.jsx)(n.code,{children:'"handled"'}),". This only applies for the ",(0,r.jsx)(n.code,{children:"scroll"})," preset, because it is passed into the React Native ",(0,r.jsx)(n.a,{href:"https://facebook.github.io/react-native/docs/scrollview.html",children:(0,r.jsx)(n.code,{children:"ScrollView"})})," component under its ",(0,r.jsx)(n.code,{children:"keyboardShouldPersistTaps"})," prop."]}),"\n",(0,r.jsxs)(n.p,{children:["The valid values for this prop are: ",(0,r.jsx)(n.code,{children:'"handled"'}),", ",(0,r.jsx)(n.code,{children:'"always"'}),",and ",(0,r.jsx)(n.code,{children:'"never"'}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen preset="scroll" keyboardShouldPersistTaps="never">\n  {/* ... content here ... */}\n</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"scrollviewprops",children:(0,r.jsx)(n.code,{children:"ScrollViewProps"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ScrollViewProps"})," prop is an object that is passed as props to the React Native ",(0,r.jsx)(n.a,{href:"https://facebook.github.io/react-native/docs/scrollview.html",children:(0,r.jsx)(n.code,{children:"ScrollView"})})," component. This only applies for the ",(0,r.jsx)(n.code,{children:"scroll"})," preset."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen preset="scroll" ScrollViewProps={{ contentContainerStyle: { padding: 10 } }}>\n  {/* ... content here ... */}\n</Screen>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"scrollenabledtogglethreshold",children:(0,r.jsx)(n.code,{children:"scrollEnabledToggleThreshold"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"scrollEnabledToggleThreshold"})," prop is an optional ",(0,r.jsx)(n.code,{children:"number"})," that determines the threshold at which the ",(0,r.jsx)(n.code,{children:"scrollEnabled"})," prop of the ",(0,r.jsx)(n.code,{children:"ScrollView"})," is toggled. This only applies for the ",(0,r.jsx)(n.code,{children:"auto"})," preset. The default value is ",(0,r.jsx)(n.code,{children:"{ percent: 0.92 }"}),". You can pass a point value in lieu of a percentage, e.g. ",(0,r.jsx)(n.code,{children:"{ point: 100 }"})," will enable scrolling when the scroll view height is less than 100 points larger than the scroll view content height."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<Screen preset="scroll" scrollEnabledToggleThreshold={{ percent: 0.95 }}>\n  {/* ... content here ... */}\n</Screen>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var r=s(6540);const o={},c=r.createContext(o);function t(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);