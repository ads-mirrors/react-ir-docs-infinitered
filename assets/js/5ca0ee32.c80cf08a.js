"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[8773],{132:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(4848),i=a(8453);const o={},r="AppNavigator.tsx",s={id:"ignite-cli/boilerplate/app/navigators/AppNavigator.tsx",title:"AppNavigator.tsx",description:"If you open the file app/navigators/AppNavigator.tsx up, you'll find the AppNavigator and the AppStack.",source:"@site/docs/ignite-cli/boilerplate/app/navigators/AppNavigator.tsx.md",sourceDirName:"ignite-cli/boilerplate/app/navigators",slug:"/ignite-cli/boilerplate/app/navigators/AppNavigator.tsx",permalink:"/ignite-cli/boilerplate/app/navigators/AppNavigator.tsx",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"Ignite",previous:{title:"Navigation in Ignite",permalink:"/ignite-cli/boilerplate/app/navigators/Navigation"},next:{title:"navigationUtilities.ts",permalink:"/ignite-cli/boilerplate/app/navigators/navigationUtilities.ts"}},p={},c=[];function l(t){const e={a:"a",code:"code",h1:"h1",p:"p",...(0,i.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"appnavigatortsx",children:"AppNavigator.tsx"}),"\n",(0,n.jsxs)(e.p,{children:["If you open the file ",(0,n.jsx)(e.code,{children:"app/navigators/AppNavigator.tsx"})," up, you'll find the AppNavigator and the AppStack."]}),"\n",(0,n.jsx)(e.p,{children:"The AppNavigator is the root navigator for your whole app. It will have the navigation container and wrap the AppStack."}),"\n",(0,n.jsxs)(e.p,{children:["The AppStack is a native stack navigator (via ",(0,n.jsx)(e.a,{href:"https://reactnavigation.org/docs/hello-react-navigation#creating-a-native-stack-navigator",children:"React Navigation"}),") and contains all the screens and subnavigators of your app."]}),"\n",(0,n.jsxs)(e.p,{children:["In the case of Ignite's demo code, it is prepared with an example flow for an app requiring authentication. The screens included within the AppStack are dependent on value of ",(0,n.jsx)(e.code,{children:"isAuthenticated"})," from ",(0,n.jsx)(e.code,{children:"authenticationStore"}),". If in an unauthenticated state, the only screen to be shown will be the ",(0,n.jsx)(e.code,{children:"LoginScreen"}),". Otherwise, that screen is left out of the navigator and the user is presented with the ",(0,n.jsx)(e.code,{children:"WelcomeScreen"})," and screens that fall under the ",(0,n.jsx)(e.code,{children:"DemoNavigator"})]})]})}function d(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},8453:(t,e,a)=>{a.d(e,{R:()=>r,x:()=>s});var n=a(6540);const i={},o=n.createContext(i);function r(t){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:r(t.components),n.createElement(o.Provider,{value:e},t.children)}}}]);