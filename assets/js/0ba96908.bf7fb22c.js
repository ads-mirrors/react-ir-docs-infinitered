"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[1284],{8193:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"ignite-cli/boilerplate/app/theme/spacing.ts","title":"spacing.ts","description":"Spacing refers to the whitespace in between the elements in your app.","source":"@site/docs/ignite-cli/boilerplate/app/theme/spacing.ts.md","sourceDirName":"ignite-cli/boilerplate/app/theme","slug":"/ignite-cli/boilerplate/app/theme/spacing.ts","permalink":"/ignite-cli/boilerplate/app/theme/spacing.ts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"spacing.ts"},"sidebar":"Ignite","previous":{"title":"colors.ts","permalink":"/ignite-cli/boilerplate/app/theme/colors.ts"},"next":{"title":"typography.ts","permalink":"/ignite-cli/boilerplate/app/theme/typography.ts"}}');var s=t(4848),a=t(8453);const r={title:"spacing.ts"},o="Spacing",c={},p=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spacing",children:"Spacing"})}),"\n",(0,s.jsx)(n.p,{children:"Spacing refers to the whitespace in between the elements in your app."}),"\n",(0,s.jsxs)(n.p,{children:["Spacing should be consistent and thought of as a first class technique right alongside ",(0,s.jsx)(n.a,{href:"/ignite-cli/boilerplate/app/theme/colors.ts",children:"colors"})," and ",(0,s.jsx)(n.a,{href:"/ignite-cli/boilerplate/app/theme/typography.ts",children:"typography"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Anytime you add margins, or padding, they should come from this spacing scale, with relatively few exceptions."}),"\n",(0,s.jsxs)(n.p,{children:["Spacings are defined in ",(0,s.jsx)(n.code,{children:"app/theme/spacing.ts"}),". The scale we use in Ignite is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const spacing = {\n  micro: 2,\n  tiny: 4,\n  extraSmall: 8,\n  small: 12,\n  medium: 16,\n  large: 24,\n  extraLarge: 32,\n  huge: 48,\n  massive: 64,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { spacing } from "@/theme/spacing"\n\n$containerStyle = {\n  margin: spacing.small,\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Which type of scale you use is based on the design."}),"\n",(0,s.jsx)(n.p,{children:"If you've got simpler app, you may only need 6 items. Or maybe you need lots of items."}),"\n",(0,s.jsx)(n.p,{children:"Whatever you choose, try to stick with your scale and not use custom values if possible, as consistent spacing will give your app a very polished look and feel."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);