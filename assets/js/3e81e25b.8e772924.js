"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[6354],{4283:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=t(4848),s=t(8453);const o={},a="patching",c={id:"gluegun/toolbox-api/patching",title:"patching",description:"Tools to help adjust the contents of text files.",source:"@site/docs/gluegun/toolbox-api/patching.md",sourceDirName:"gluegun/toolbox-api",slug:"/gluegun/toolbox-api/patching",permalink:"/gluegun/toolbox-api/patching",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"Gluegun",previous:{title:"parameters",permalink:"/gluegun/toolbox-api/parameters"},next:{title:"print",permalink:"/gluegun/toolbox-api/print"}},r={},l=[{value:"exists",id:"exists",level:2},{value:"update",id:"update",level:2},{value:"append",id:"append",level:2},{value:"prepend",id:"prepend",level:2},{value:"replace",id:"replace",level:2},{value:"patch",id:"patch",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"patching",children:"patching"}),"\n",(0,i.jsx)(n.p,{children:"Tools to help adjust the contents of text files."}),"\n",(0,i.jsxs)(n.p,{children:["You can access these tools on the Gluegun toolbox, via ",(0,i.jsx)(n.code,{children:"const { patching } = require('gluegun')"}),", or directly via ",(0,i.jsx)(n.code,{children:"const { patching } = require('gluegun/patching')"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"exists",children:"exists"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is an ",(0,i.jsx)(n.strong,{children:"async"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Reads in a file and checks whether it's content matches a string or regular expression."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Case sensitive string match\nconst barbExists = await toolbox.patching.exists('config.txt', 'Barb')\n\n// Short form regex\nconst barbExists = await toolbox.patching.exists('config.txt', /Barb/)\n\n// Regex Object\nconst barbExists = await toolbox.patching.exists('config.txt', new Regex(/Barb/, 'i'))\n"})}),"\n",(0,i.jsx)(n.h2,{id:"update",children:"update"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is an ",(0,i.jsx)(n.strong,{children:"async"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Updates a given file by reading it in and then taking the result of the provided callback and writing it back to the config file."}),"\n",(0,i.jsxs)(n.p,{children:["If the file ends in ",(0,i.jsx)(n.code,{children:".json"}),", it'll be read in as an object. Return the updated object to have it written back to the config."]}),"\n",(0,i.jsxs)(n.p,{children:["If the file doesn't end in ",(0,i.jsx)(n.code,{children:".json"}),", you'll receive a string. Return an updated string to write back to the file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await toolbox.patching.update('config.json', (config) => {\n  config.key = 'new value'\n  return config\n})\n\nawait toolbox.patching.update('config.txt', (data) => {\n  return data.replace('Jamon', 'Boss')\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"append",children:"append"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is an ",(0,i.jsx)(n.strong,{children:"async"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Appends a string to the given file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await toolbox.patching.append('config.txt', 'Append this string\\n')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"prepend",children:"prepend"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is an ",(0,i.jsx)(n.strong,{children:"async"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Prepends a string to the given file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await toolbox.patching.prepend('config.txt', 'Prepend this string\\n')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"replace",children:"replace"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is an ",(0,i.jsx)(n.strong,{children:"async"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Replaces a string in a given file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await toolbox.patching.replace('config.txt', 'Remove this string\\n', 'Replace with this string\\n')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"patch",children:"patch"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["This is an ",(0,i.jsx)(n.strong,{children:"async"})," function."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Allows inserting next to, deleting, and replacing strings or regular expression in a given file. If ",(0,i.jsx)(n.code,{children:"insert"})," is already present in the file, it won't change the file, unless you also pass through ",(0,i.jsx)(n.code,{children:"force: true"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await toolbox.patching.patch('config.txt', { insert: 'Jamon', before: 'Something else' })\nawait toolbox.patching.patch('config.txt', { insert: 'Jamon', after: 'Something else' })\nawait toolbox.patching.patch('config.txt', { insert: 'Jamon', replace: 'Something else' })\nawait toolbox.patching.patch('config.txt', { insert: 'Jamon', replace: 'Something else', force: true })\nawait toolbox.patching.patch('config.txt', { delete: 'Something' })\nawait toolbox.patching.patch('config.txt', { insert: 'Jamon', after: new RegExp('some regexp') })\nawait toolbox.patching.patch(\n  'config.txt',\n  { insert: 'Jamon', after: 'Something else' },\n  { insert: 'Jamon', before: 'Something else' },\n)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);