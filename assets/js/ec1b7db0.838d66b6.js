"use strict";(self.webpackChunkir_docs=self.webpackChunkir_docs||[]).push([[179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8956:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},o="Monorepo Structure",l={unversionedId:"reactotron/contributing/monorepo",id:"reactotron/contributing/monorepo",title:"Monorepo Structure",description:"Yarn 3",source:"@site/docs/reactotron/contributing/monorepo.md",sourceDirName:"reactotron/contributing",slug:"/reactotron/contributing/monorepo",permalink:"/reactotron/contributing/monorepo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"Reactotron",previous:{title:"Architecture",permalink:"/reactotron/contributing/architecture"},next:{title:"Releasing",permalink:"/reactotron/contributing/releasing"}},p={},s=[{value:"Yarn 3",id:"yarn-3",level:2},{value:"nodeLinker",id:"nodelinker",level:3},{value:"Patches",id:"patches",level:3},{value:"Nx",id:"nx",level:2},{value:"Tasks",id:"tasks",level:3},{value:"Affected",id:"affected",level:3},{value:"project.json",id:"projectjson",level:3},{value:"Task Caching",id:"task-caching",level:3},{value:"Linting",id:"linting",level:2},{value:"Typescript",id:"typescript",level:2},{value:"Common Gotchas",id:"common-gotchas",level:3},{value:"Prettier",id:"prettier",level:2},{value:"Ignore file",id:"ignore-file",level:3}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"monorepo-structure"},"Monorepo Structure"),(0,a.kt)("h2",{id:"yarn-3"},"Yarn 3"),(0,a.kt)("p",null,"This project uses yarn 3 workspaces to manage the monorepo. It hoists dependencies shared across workspaces to the root of the project, and allows for a single ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn.lock")," file to be used for all packages."),(0,a.kt)("p",null,"As long as you have yarn 1 installed, you will use the yarn 3 automatically using the version specified in ",(0,a.kt)("inlineCode",{parentName:"p"},".yarnrc.yml"),"."),(0,a.kt)("h3",{id:"nodelinker"},"nodeLinker"),(0,a.kt)("p",null,"Yarn 3 philosophically has chosen to go in a direction where dependencies should be vendored and checked into the repo. This is a departure from the way yarn 1 and npm work, where dependencies are installed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," directory. They call this Plug'n'Play, and it is enabled by default in yarn 3."),(0,a.kt)("p",null,"However, this can behavior can be modified through the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeLinker")," value in ",(0,a.kt)("inlineCode",{parentName:"p"},"yarnrc.yml")," to use ",(0,a.kt)("inlineCode",{parentName:"p"},"node-modules"),", which is the normal behavior for yarn 1 and npm."),(0,a.kt)("p",null,"Since yarn 1 is no longer being actively worked on, so we are using yarn 3 with the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeLinker")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"node-modules"),"."),(0,a.kt)("h3",{id:"patches"},"Patches"),(0,a.kt)("p",null,"Yarn 3 has a patching feature similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"patch-package")," through ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn patch <package>"),". You can read more about it here: ",(0,a.kt)("a",{parentName:"p",href:"https://yarnpkg.com/cli/patch"},"https://yarnpkg.com/cli/patch")),(0,a.kt)("h2",{id:"nx"},"Nx"),(0,a.kt)("p",null,"This project uses ",(0,a.kt)("inlineCode",{parentName:"p"},"nx")," as a task runner for the monorepo. Nx has many features, including build integration, dependency graph visualization, and more. You can read more about it here: ",(0,a.kt)("a",{parentName:"p",href:"https://nx.dev/"},"https://nx.dev/")),(0,a.kt)("h3",{id:"tasks"},"Tasks"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"npx nx run-many")," is a common command used to run a command across all workspaces. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nx run-many --target=lint")," will run the ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," target in all workspaces. Targets are like npm scripts, but they can be run across multiple workspaces."),(0,a.kt)("p",null,"These are aliased as yarn scripts in the root ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn lint")," will run the ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," target in all workspaces."),(0,a.kt)("h3",{id:"affected"},"Affected"),(0,a.kt)("p",null,"Nx also has a ",(0,a.kt)("inlineCode",{parentName:"p"},"affected")," command that will run a command on all workspaces that have been affected by a change. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"npx nx affected:lint")," will run the ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," target in all workspaces that have been affected by a change."),(0,a.kt)("h3",{id:"projectjson"},"project.json"),(0,a.kt)("p",null,"Each workspace needs a ",(0,a.kt)("inlineCode",{parentName:"p"},"project.json")," file to register it with nx. This file is used to define the targets for the workspace, and to define the dependencies between workspaces."),(0,a.kt)("p",null,"Any script in the ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")," section of the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file will be registered as a target in nx. For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," script in the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file will be registered as a target in nx."),(0,a.kt)("p",null,"Additionally, you can set target defaults in the root ",(0,a.kt)("inlineCode",{parentName:"p"},"nx.json")," file."),(0,a.kt)("h3",{id:"task-caching"},"Task Caching"),(0,a.kt)("p",null,"Nx has a feature called task caching that will cache the output of a task. Nx can fingerprint whether a task like ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," has already run and not changed. The cache is stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules/.cache/.nx")," directory. If you want to clear the cache, you can delete the ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules/.cache/.nx")," directory."),(0,a.kt)("h2",{id:"linting"},"Linting"),(0,a.kt)("p",null,"Eslint allows for having a parent config file and then extending it in child config files. This project has a generic Typescript linting setup at the top, and then child projects can extend it and add their own rules (for React, Electron, etc.). Read more about it here: ",(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/docs/latest/user-guide/configuring/configuration-files"},"https://eslint.org/docs/latest/user-guide/configuring/configuration-files")),(0,a.kt)("h2",{id:"typescript"},"Typescript"),(0,a.kt)("p",null,"In order for ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript-eslint")," to work, we use a ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.base.json")," in the parent directory, and then each workspace extends that base with it's own ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file. But in the parent eslint config, you must declare the location of all the tsconfig.json files in a glob pattern. You can read more here: ",(0,a.kt)("a",{parentName:"p",href:"https://typescript-eslint.io/linting/typed-linting/monorepos/#one-tsconfigjson-per-package-and-an-optional-one-in-the-root"},"https://typescript-eslint.io/linting/typed-linting/monorepos/#one-tsconfigjson-per-package-and-an-optional-one-in-the-root")),(0,a.kt)("h3",{id:"common-gotchas"},"Common Gotchas"),(0,a.kt)("p",null,"In order to prevent nested folders in our ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," directory, ",(0,a.kt)("inlineCode",{parentName:"p"},'"rootDir": ".",')," needs to be specified in the workspace ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," to avoid the parent ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.base.json")," from being used."),(0,a.kt)("h2",{id:"prettier"},"Prettier"),(0,a.kt)("h3",{id:"ignore-file"},"Ignore file"),(0,a.kt)("p",null,"Prettier has a ",(0,a.kt)("inlineCode",{parentName:"p"},".prettierignore")," file that is used to ignore files. This file is used in addition to the ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," file. This is useful for ignoring files that are not checked into git, but still need to be ignored by prettier. Unfortunately, there is no way to extend the ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},".prettierignore")," file, so we have to duplicate the entries. See ",(0,a.kt)("inlineCode",{parentName:"p"},"copy-prettier-ignore")," in the root ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," script."))}u.isMDXComponent=!0}}]);